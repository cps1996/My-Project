          

(function (window, document) {

	var div = flbDOM = document.createElement('div');
	try{var flbDOM = div.attachShadow({mode: 'open'});}catch(e){}
	
	flbDOM.innerHTML = '<style type="text/css">*{--flb-theme-color:#0075be;--flb-header-color:#0075be;--flb-label-color:#FFF;--flb-bot-logo:url(https://floatbot.ai/portal/chatbot/logo/1638.png);} .flb-bot{    display: none;    background: #f3f5f8;	border-radius: 13px;    position: fixed;    right: 20px;    bottom: 20px;    width: 370px;    font-family: Arial, sans-serif;    z-index: 2147483640!important;    -webkit-box-shadow: rgba(0,0,0,.2) 0 5px 65px;    box-shadow: 0 5px 65px rgba(0,0,0,.2);    height: calc(100vh - 80px);    /*height: calc(100vh - 120px);*/    min-height: 200px;    max-height: 600px;}.flb-header{	display: flex;	align-items: center;	height: 60px;	padding-left: 13px;	background-color: var(--flb-theme-color);    background-image: var(--flb-header-color);    border-top-left-radius: 12px;    border-top-right-radius: 12px;    position: relative;    color: white;    font-size: 17px;/*    font-weight: 600;*/    box-shadow: 0 2px 4px 0 rgba(0,0,0,0.12);}.flb-company-logo{    background-image: var(--flb-bot-logo);	background-position: 50% center;	display: inline-block;	height: 40px;    width: 40px;    margin-right: 8px;    padding:2px;    background-size: cover;    border-color:var(--flb-theme-color);}#open-session-list-btn, #flb-minimize-btn{    opacity: 0.5;}#open-session-list-btn:hover , #flb-minimize-btn:hover {    cursor: pointer;    opacity: 1;}.flb-title-btn-wrapper{	margin-left: auto;	padding-right: 12px;}.flb-open-conv-btn{	vertical-align: middle;}.flb-body{	display: block;    scroll-behavior: smooth;    height: calc(100% - 132px);    background-repeat: repeat;    width: 100%;    overflow-y: auto;    overflow-x: hidden;    background-color: #FFF;    font-size: 14px;    padding-top: 10px;}.flb-footer{    text-align: center;    position: absolute;    bottom: 0;    left: 0;    width: 100%;    border-bottom-left-radius: 12px;    border-bottom-right-radius: 12px;    background: #f3f3f3;}#flb-restart-button{    cursor: pointer;   }#flb-restart-button svg{	 fill: var(--flb-theme-color);}.flb-input-sec{	display: flex;    margin: 0px;    z-index: 2147483636;    position: relative;    bottom: 0px;    padding: 5px 6px;    background-color: #fff;    /*box-shadow: 0 -3px 10px 0 rgba(0,0,0,0.05);*/}#flb-input{	flex-grow: 1 !important;	border: none !important;	font-size: 15px;    color: #3b444f;    height: 20px;    outline: 0 none !important;    padding: 5px 10px !important;    border-radius: 10px;    margin-left: 7px;    margin-right: 2px;    letter-spacing: .3px;}.flb-input-holder{	height: 40px;}.flb-body::-webkit-scrollbar-track{background-color:none}.flb-body::-webkit-scrollbar{width:6px;background-color:#f5f5f5}.flb-body::-webkit-scrollbar-thumb {background-color: rgba(0,0,0,.2);}.flb-conversation-summary-body {    position: relative;}.flb-conversation-summary{    padding: 20px 26px;    border-top: 1px solid #f3f4f5;    position: relative;}.flb-conversation-summary:hover {    background-color: #f3f3f5;    cursor: pointer;}.flb-conversation-active::after {    content: " ";    position: absolute;    top: 30px;    left: 36px;    background-color: #1B5E20;    border-radius: 10px;    height: 8px;    width: 8px;    border: 1px solid white;}.flb-conversation-summary-icon {    background-position: center;    border-radius: 100%;    background-repeat: no-repeat;    bottom: 0;    position: absolute;    top: 0;    background-color: #a11638;    width: 46px;    height: 47px;    opacity: 0.7;    background-image: url(https://us.floatbot.ai/portal/wbot/conversation_icon.png);}.flb-conversation-summary-meta {    margin-bottom: 2px;    display: block;    margin-left: 60px;}.flb-conversation-summary-body-author {    float: left;    padding-top: 5px;    color: rgb(12, 12, 12);    text-transform: capitalize;}.flb-conversation-summary-body-author, .flb-conversation-summary-timestamp {    font-size: 13px;    max-width: 49%;    overflow: hidden;    text-overflow: ellipsis;    white-space: nowrap;}.flb-conversation-summary-timestamp {    float: right;    text-align: right;    color: rgba(73,76,93,.7);    padding-top: 5px;}.flb-conversation-summary-content {    clear: both;    position: relative;    margin-left: 60px;}.flb-conversation-summary-content-container {    margin-right: 25px;    color: rgba(73, 76, 93, 0.94);    font-size: 13px;    line-height: 19px;}.flb-conversation-summary-content-text {    white-space: nowrap;    overflow: hidden;    text-overflow: ellipsis;}@media (max-width:481px)  {	.flb-bot {		height: 100% !important;    	width: 100% !important;    	right: 0px;    	position: fixed;    	max-height: 100vh;    	bottom: 0px;    	border-radius: 0px;	}	.flb-header{		border-radius: 0px;	}	.flb-footer{		border-radius: 0px;    }    .flb-body{        font-size: 15px;    }}.flb-bot-msg, .flb-user-msg{    display: flex;    flex-direction: column;    padding-left: 3%;    padding-right: 3%;    position: relative;    padding-bottom: 3px;}.flb-text-view{    position: relative;    border-radius: 15px;    padding: 0.571429rem 0.857143rem;    max-width: 90%;    word-break: break-word;    overflow-wrap: break-word;}.flb-text-view p{    margin: 0;}.flb-button-view{     max-width: 90%;}.flb-bot-msg .flb-text-view{    display: inline-block;    background: #f5f5f5;    border-bottom-left-radius: 0;    color: #000;}.flb-user-msg .flb-text-view{    -ms-flex-pack: end;    justify-content: flex-end;    -ms-flex-align: end;    align-items: flex-end;    margin-left: auto;    overflow-wrap: break-word;    border-bottom-right-radius: 0;    color: #FFFFFF;    background-color: var(--flb-theme-color);    margin-bottom: 10px;    margin-top: 10px;}.flb-user-msg .flb-msg-timestamp{    text-align: end;}.flb-powered-text{	text-align: center;	font-size: 12px;	color: #808285;	padding-bottom: 3px;    padding-top: 3px;    min-height: 15px;}.flb-powered-ic{	height: 15px;	margin-bottom: -3px;}.flb-msg-timestamp {    font-size: 10px;    color: #acacac;    visibility: hidden;}.flb-item{    max-width: 90%;    position: relative;}.flb-item-image {    width: 100%;    min-height: 100px;    cursor: pointer;    border-radius: 15px;    background: #ebf1ff;    border-bottom-left-radius: 0;}.flb-bot-msg:hover .flb-msg-timestamp {    visibility: visible;}.flb-user-msg:hover .flb-msg-timestamp {    visibility: visible;}.animate__zoomIn{    -webkit-animation-name:flb-slide-up!important;    -moz-animation-name:flb-slide-up!important;    -ms-animation-name:flb-slide-up!important;    -o-animation-name:flb-slide-up!important;    animation-name:flb-slide-up!important;    -webkit-animation-duration:.2s!important;    -moz-animation-duration:.2s!important;    -ms-animation-duration:.2s!important;    -o-animation-duration:.2s!important;    animation-duration:.2s!important;    -webkit-animation-fill-mode:both!important;    -moz-animation-fill-mode:both!important;    -ms-animation-fill-mode:both!important;    -o-animation-fill-mode:both!important;    animation-fill-mode:both!important;    -webkit-animation-timing-function:ease-in-out!important;    -moz-animation-timing-function:ease-in-out!important;    -ms-animation-timing-function:ease-in-out!important;    -o-animation-timing-function:ease-in-out!important;    animation-timing-function:ease-in-out!important;    -webkit-animation-delay:.15s!important;    -moz-animation-delay:.15s!important;    -ms-animation-delay:.15s!important;    -o-animation-delay:.15s!important;    animation-delay:.15s!important}@-webkit-keyframes flb-slide-up{    0%{        filter:alpha(Opacity=0);        opacity:0;        -webkit-transform:translateY(4%);        -moz-transform:translateY(4%);        -ms-transform:translateY(4%);        -o-transform:translateY(4%);        transform:translateY(4%)    }    100%{        filter:alpha(Opacity=100);        opacity:1;        -webkit-transform:none;        -moz-transform:none;        -ms-transform:none;        -o-transform:none;        transform:none    }}@-moz-keyframes flb-slide-up{    0%{        filter:alpha(Opacity=0);        opacity:0;        -webkit-transform:translateY(4%);        -moz-transform:translateY(4%);        -ms-transform:translateY(4%);        -o-transform:translateY(4%);        transform:translateY(4%)    }    100%{        filter:alpha(Opacity=100);        opacity:1;        -webkit-transform:none;        -moz-transform:none;        -ms-transform:none;        -o-transform:none;        transform:none    }}@-o-keyframes flb-slide-up{    0%{        filter:alpha(Opacity=0);        opacity:0;        -webkit-transform:translateY(4%);        -moz-transform:translateY(4%);        -ms-transform:translateY(4%);        -o-transform:translateY(4%);        transform:translateY(4%)    }    100%{        filter:alpha(Opacity=100);        opacity:1;        -webkit-transform:none;        -moz-transform:none;        -ms-transform:none;        -o-transform:none;        transform:none    }}@keyframes flb-slide-up{    0%{        filter:alpha(Opacity=0);        opacity:0;        -webkit-transform:translateY(4%);        -moz-transform:translateY(4%);        -ms-transform:translateY(4%);        -o-transform:translateY(4%);        transform:translateY(4%)    }    100%{        filter:alpha(Opacity=100);        opacity:1;        -webkit-transform:none;        -moz-transform:none;        -ms-transform:none;        -o-transform:none;        transform:none    }}.flb-widget-handle{    background-color: #fff;    border: 2px solid;    z-index: 9999;    border-color: var(--flb-theme-color);    backface-visibility: hidden;    background-repeat: repeat;    border-radius: 50%;    bottom: 22px;    cursor: pointer;    height: 60px;    overflow: hidden;    position: fixed;    right: 26px;    transform-origin: center center 0;    width: 60px;    animation: pulse 2s infinite;    -webkit-animation: pulse 2s infinite;    -moz-animation: pulse 2s infinite;    -o-animation: pulse 2s infinite;}@-webkit-keyframes pulse {  0% {    -webkit-box-shadow: 0 0 0 0 rgba(10, 10, 10, 0.39);  }  70% {      -webkit-box-shadow: 0 0 0 10px rgba(204,169,44, 0);  }  100% {      -webkit-box-shadow: 0 0 0 0 rgba(204,169,44, 0);  }}@keyframes pulse {  0% {    -moz-box-shadow: 0 0 0 0 rgba(10, 10, 10, 0.39);    box-shadow: 0 0 0 0 rgba(10, 10, 10, 0.39);  }  70% {      -moz-box-shadow: 0 0 0 10px rgba(204,169,44, 0);      box-shadow: 0 0 0 10px rgba(204,169,44, 0);  }  100% {      -moz-box-shadow: 0 0 0 0 rgba(204,169,44, 0);      box-shadow: 0 0 0 0 rgba(204,169,44, 0);  }}.flb-widget-open-ico{    background-image: var(--flb-bot-logo);    background-position: 50% center;    background-repeat: no-repeat;    bottom: 0;    position: absolute;    top: 0;    transition: transform 0.16s linear 0s, opacity 0.08s linear 0s, -webkit-transform 0.16s linear 0s;    width: 100%;    border-radius: 100px;    -webkit-border-radius: 100px;    -moz-border-radius: 100px;    background-size: 100%;}.flb-fade-out{     animation: 1s fadeIn;  animation-fill-mode: forwards;    visibility: hidden;}@keyframes fadeIn {  99% {    visibility: hidden;  }  100% {    visibility: visible;  }}@keyframes zoom {    0% {        transform: scale(0);    }    100% {        transform: scale(1);    }}#flb-u-msg-cnt {    position: fixed;    z-index: 9999;    background: #f46177;    color: white;    right: 25px;    font-size: 10px;    width: 15px;    text-align: center;    border-radius: 50%;    font-weight: 600;    border: 1px solid;}.slider {  position: relative;  padding: 10px 0px;}.slider-wrapper {  overflow: hidden;}.slides {  display: flex;  position: relative;  top: 0;  width: 10000px;}.slides.shifting {  transition: left .2s ease-out;}.flb-slide {  min-height: 200px;  cursor: pointer;  display: flex;  flex-direction: column;  justify-content: center;  text-align: center;  position: relative;  background: #fdfcf9;  border-radius: 2px;  color: #000;}.flb-slide .text-child-buttons {    list-style: none;    padding: 0;    margin-right: 25px;}.flb-slide .text-item{    margin-right: 25px;    padding-top: 10px;}.flb-slide .flb-product_description{    margin-right: 25px;}.flb-slide img{    width: 100%;    max-height: 200px;}.control {    position: absolute;    top: 50%;    width: 25px;    height: 25px;    background: #cccccc5c;    border-radius: 50px;    margin-top: -20px;    box-shadow: 1px 1px 10px rgba(0, 0, 0, 0.3);    z-index: 2;}.prev,.next {  background-size: 22px;  background-position: center;  background-repeat: no-repeat;  cursor: pointer;}.prev {  left: -7px;}.next { right: -7px;}.next::before {    right: 10px;    -ms-transform: rotate(135deg);    -webkit-transform: rotate(135deg);    transform: rotate(135deg);    position: absolute;    top: 8px;    content: "";    display: block;    width: 8px;    height: 8px;    border-left: 2px solid black;    border-top: 2px solid black;}.prev::before {    left: 9px;    -ms-transform: rotate(-45deg);    -webkit-transform: rotate(-45deg);    transform: rotate(-45deg);    position: absolute;    top: 8px;    content: "";    display: block;    width: 8px;    height: 8px;    border-left: 2px solid black;    border-top: 2px solid black;}.prev:active,.next:active {  transform: scale(.8);}.flb-map-image{    width: 100%;    height: 200px;    position: relative;    background-size: 100%;    min-width: 250px;}.flb-full-modal{    display: none;    position: fixed;    z-index: 99999999999;    padding-top: 100px;    left: 0;    top: 0;    width: 100%;    height: 100%;    overflow: auto;    background-color: rgba(0,0,0,0.9);}.flb-full-modal .flb-close-modal{    position: absolute;    top: 15px;    right: 35px;    color: #f1f1f1;    font-size: 40px;    font-weight: bold;    transition: 0.3s;    cursor: pointer;}.flbmodal-content{    -webkit-animation-name: zoom;    -webkit-animation-duration: 0.6s;    animation-name: zoom;    animation-duration: 0.6s;    margin: auto;    display: block;    max-width: 700px;}.flbGeoMap {    position: fixed;    z-index: 99999999999;    padding-top: 50px;    left: 0;    top: 0;    width: 100%;    height: 100%;    background-color: rgba(0,0,0,0.9);}#flb-new-conv-btn{    display: none;}#flb-new-conv-btn div{    border-radius: 40px;    position: relative;    opacity: .8;    overflow: hidden;    padding: 4px 10px;    -webkit-box-shadow: 0 -4px 6px -6px rgba(0,0,0,0.4);    -moz-box-shadow: 0 -4px 6px -6px rgba(0,0,0,0.4);    box-shadow: 0 8px -4px -6px rgba(0,0,0,0.4);    font-size: 13px;    color: #fff;    font-weight: bold;    line-height: 29px;    cursor: pointer;    display: inline-block;    background: linear-gradient(150deg, rgb(19, 78, 129) 0%, rgb(58, 148, 226) 61%, rgb(102, 172, 233) 100%);}#flb-send-msg-btn{    cursor: pointer;}#flb-send-msg-btn svg{	 fill: var(--flb-theme-color);}.round-dot{    display:inline-block;    width:7px;    height:7px;    border-radius:50%;    background:#bbb;    margin: 1px;    animation:typing-style 1.3s linear infinite}.typing-style .round-dot:nth-child(2){    animation-delay:-1.1s}.typing-style .round-dot:nth-child(3){    animation-delay:-.9s}@keyframes typing-style{0%,100%,60%{transform:initial}30%{transform:translateY(-8px)}}#snackbar{    display: none;    height: 40px;    color: #FFF;    line-height: 40px;    background-color: #FFF;    position: absolute;    z-index: 9999999999;    width: 100%;    animation: flb-slide-up .3s;}.flb-info-msg{    text-align: center;}.flb-info-msg div{    background: #89a4a95e;    padding: 5px 10px;    font-size: 12px;    color: #000000;    border-radius: 10px;    margin: 5px;    display: inline-block;}#flb-reconnect-holder{    display: none;    width: 100%;    background-color: #f44336;    text-align: center;    padding: 10px 0px;    color: #FFF;    position: absolute;    z-index: 9999999999;    overflow: hidden;}#flb-reconnect-holder:before {    display: block;    position: absolute;    content: "";    left: -200px;    width: 200px;    height: 100%;    top: 1px;    background-color: #d0060626;    animation: flb-loading 2s linear infinite;}@keyframes flb-loading {    from {left: -200px; width: 30%;}    50% {width: 30%;}    70% {width: 70%;}    80% { left: 50%;}    95% {left: 120%;}    to {left: 100%;}}#flb-iframe-window{    overflow: auto;    height: 100%;    position: relative;    display: none;}#flb-iframe {    border: none;    position: absolute;    width: 100%;    height: 84%;    background: white none repeat scroll 0% 0%;    border: medium none;    z-index: 2147483637;}#flb-spinner {    position: absolute;    z-index: 2147483637;    top: 40%;    left: 45%;    display: none;}.close-flb-modal{    position: absolute;    font-size: 30px;    top: 5px;    right: 20px;    z-index: 2147483638;    cursor: pointer;    background: #e6e5e4;    border-radius: 20px;    padding: 0px 7px;}.flb-action-buttons{    list-style: none;    margin: auto;    padding: 0;    margin-top: 5px;}.flb-action-buttons li{    float: left;    padding: 5px 10px;    border: 1px solid var(--flb-theme-color);    margin-left: 5px;    border-radius: 5px;    transition: transform .2s;    color: var(--flb-theme-color);    margin-bottom: 7px;}.flb-action-buttons li:hover{    cursor: pointer;    transform: scale(1.1);}.flb-quick-reply-buttons{    padding: 5px 0px 10px 0px;    max-width: 87%;}.flb-quick-reply-buttons .flb-action-elem{    border: 1px solid var(--flb-theme-color);    padding: 7px 10px;    margin-left: 5px;    border-radius: 30px;    display: inline-block;    margin-bottom: 6px;    color: var(--flb-theme-color);}.flb-quick-reply-buttons .flb-action-elem:hover{    color: #FFF;    background-color: var(--flb-theme-color);    cursor: pointer;}.flb-quick-reply-buttons .quick-slect{    min-height: 200px;}.flb-quick-reply-buttons .slect-search{    padding: 8px;    border: 1px solid #b5b0b0;    border-radius: 5px;    font-size: 15px;    font-weight: 500;    outline: none;    width: 94%;}.flb-quick-reply-buttons .options{    padding: 0px 5px;    margin: 0;    max-height: 150px;    overflow: auto;    position: relative;    box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);    color: #000;}.options::-webkit-scrollbar {    width: 6px;}.options::-webkit-scrollbar-thumb {    background-color: rgba(0,0,0,.2);}.flb-quick-reply-buttons .options li{    padding: 10px;    font-size: 15px;    border-bottom: 1px solid #f3f3f3;}.flb-quick-reply-buttons .options li:hover{    background: #f0f8ff;    cursor: pointer;}.flb-sims-query{    max-width: 80%;    background: #ecf2f3;    padding: 5px;    margin-bottom: 15px;    font-size: 12px;}.flb-sims-query .flb-sims-title{    font-weight: 600;    color: #2b2929;}.flb-sims-query ul{    list-style: none;    padding: 0px;    margin: 0px;}.flb-sims-query ul li{    cursor: pointer;    color: #3d94bf;    padding-left: 10px;    padding-right: 10px;    margin-top: 5px;    margin-top: 8px;}.flb-sims-query ul .view-more {    text-align: center;    margin-top: 15px !important;    color: #3234a9bd !important;}.file-upload-placeholder{    background-color: rgba(0, 0, 0, 0.11);    text-overflow: ellipsis;    white-space: nowrap;    cursor: pointer;    display: inline-block;    overflow: hidden;    color: #000 !important;    border-radius: 12px;    padding: 5px;    line-height: initial;    margin-top: 4px;}#flb-cancel-upload-btn{    background-image: url(https://us.floatbot.ai/portal/wbot/ic_cancel.png);    position: absolute;    width: 18px;    height: 18px;    cursor: pointer;    margin-left: 3px;    top: 12px;    background-size: 18px;}#flb-bar-holder{    display: none;    height: 40px;    line-height: 40px;    background-color: #FFF;    position: absolute;    z-index: 2147483637;    width: 100%;    animation: flb-slide-up .3s;}#flb-file-upload-progress{    left: 14px;    width: 90%;    position: relative;    top: 6px;}/*.flb-click-anm:active {  animation: zoom .5s;}*/#flb-record-voice-btn{    cursor: pointer;    position: absolute;    width: 25px;    right: 10px;    top: 7px;    padding: 0px 2px;}#flb-record-voice-btn svg{	 fill: var(--flb-theme-color);}.show {    transition: opacity 1s linear;    transform:translate(0);  opacity: 1;}  .hidden {    transform:translate(9999px);  opacity: 0;  }.mic-pulse {    border-radius: 50%;    background: #ef060685 no-repeat 50%;    animation: pulse 1s infinite;}.map-btn li{    margin-right: 3px;}.map-address{    font-weight: 600;    padding: 5px;}.flb-action-elem img{    vertical-align: middle;    border-radius: 28px;    margin-right: 6px;}.flb-action-elem.img{    font-size: 15px;    padding: 3px 9px;}.flb-action-elem.list{    display: block;    text-align: center;    margin-left: 20px;    margin-right: 20px;}ul.text-child-buttons{    list-style: none;}ul.text-child-buttons li{    padding: 3px;    font-weight: 600;    color: blue;}.notransition {    animation: none !important;    -webkit-animation: none !important;    -moz-animation: none !important;    -o-animation: none !important;  }.arabic-rtl{    direction: rtl;}.flb-container-calendar {    background: #f1f1f1;    color: #000;    padding: 15px;    max-width: 475px;    margin: 0 auto;    overflow: auto;    margin-top: 5px;}.flb-button-container-calendar button {    cursor: pointer;    display: inline-block;    zoom: 1;    background: var(--flb-theme-color);    color: #fff;    border: 1px solid var(--flb-theme-color);    border-radius: 4px;    padding: 5px 10px;}.flb-table-calendar {    border-collapse: collapse;    width: 100%;    border: none;}.flb-table-calendar td, .flb-table-calendar th {    padding: 5px;    border: 1px solid #e2e2e2;    text-align: center;    vertical-align: top;}.flb-date-picker:hover{    cursor: pointer;    background: var(--flb-theme-color);    color: white;}.flb-date-picker.selected {    font-weight: bold;    outline: 1px dashed var(--flb-theme-color);}.flb-date-picker.selected span {    border-bottom: 2px solid currentColor;}.flb-date-picker:nth-child(1) {  color: red;}.flb-button-container-calendar {    position: relative;    margin-bottom: 1em;    overflow: hidden;    clear: both;    display: flex;    justify-content: space-between;}.flb-footer-container-calendar select {    cursor: pointer;    display: inline-block;    zoom: 1;    background: #ffffff;    color: #585858;    border: 1px solid #bfc5c5;    border-radius: 3px;    padding: 5px 1em;}.icon-bounce-btn{    width: 18px !important;    height: 18px !important;    background-size: 18px 18px !important;    cursor: pointer;    border: none;    outline: none;    float: left;    -webkit-transform: translateZ(0);    transform: translateZ(0);    -webkit-transition-duration: 0.3s;    transition-duration: 0.3s;    -webkit-transition-property: transform;    transition-property: transform;    -webkit-transition-timing-function: ease-out;    transition-timing-function: ease-out;}.icon-bounce-btn.like {    background: url(https://floatbot.ai/portal/chatbot/images/thumb_up1.svg) no-repeat;   }.icon-bounce-btn.unlike {    background: url(https://floatbot.ai/portal/chatbot/images//thumb_down1.svg) no-repeat;    margin-left: 2px;}.icon-bounce-btn.like-active {    background: url(https://floatbot.ai/portal/chatbot/images/thumb_up.svg) no-repeat;   }.icon-bounce-btn.unlike-active {    background: url(https://floatbot.ai/portal/chatbot/images/thumb_down.svg) no-repeat;    margin-left: 2px;}.sentiment-holder{    position: absolute;    right: 10px;    bottom: -7px;    z-index: 9;}  .icon-bounce-btn:active {  -webkit-transform: scale(1.5);  transform: scale(1.5);  -webkit-transition-timing-function: cubic-bezier(0.47, 2.02, 0.31, -0.36);  transition-timing-function: cubic-bezier(0.47, 2.02, 0.31, -0.36);}#flb-sess-feedback {    margin-right: 5px;    color: #808285;    font-size: 12px;    text-align: end;    padding-top: 5px;}#flb-sess-feedback-btns {    margin-left: 10px;}.feedback-btns {    padding-right: 5px;    color: #4085eb;    cursor: pointer;}#sess-feedback-input {    border: 0;    outline: 0;    color: #000;    border-bottom: 1px solid #9a8b8b;    background: transparent;    -webkit-box-sizing: border-box;    box-sizing: border-box;}#end-convo-popup{    position: absolute;    width: 100%;    height: 87%;    background: var(--flb-theme-color);    top: 60px;    z-index: 9999999990;    text-align: center;    display: none;}#end-convo-popup>div{    margin-top: 40%;    color: white;}#end-convo-popup span{    display: inline-block;    color: black;    padding: 10px 16px;    border-radius: 7px;    cursor: pointer;    margin-right: 12px;    background: #fdfdfd;}pre{    white-space: pre-wrap;}table, th, td {    border: 1px solid black;    border-collapse: collapse;  }</style>'+'<div id="flb-bot" class="flb-bot animate__animated">		<header class="flb-header">		<div class="flb-company-logo"></div>		<span id="flb-title">BOI SEVA</span>		<div class="flb-title-btn-wrapper">			<span title="Previous Sessions" id="flb-prev-ses-btn">			<i id="open-session-list-btn" onclick="flb.viewConversations()">				<svg class="flb-open-conv-btn" xmlns="http://www.w3.org/2000/svg" width="21" height="5" viewBox="0 0 21 5"><g fill="currentColor" fill-rule="evenodd"><circle cx="18.5" cy="2.5" r="2.5"></circle><circle cx="10.5" cy="2.5" r="2.5"></circle><circle cx="2.5" cy="2.5" r="2.5"></circle></g></svg>			</i></span>			<span title="Minimize" id="flb-minimize-btn" onclick="flb.minimizeBot()">&nbsp;X</span>		</div>	</header>				<div id="flb-iframe-window">		<div class="close-flb-modal" onclick="flb.util.hideElements(\'#flb-iframe-window\')">×</div>		<iframe id="flb-iframe"></iframe>	</div>	<div id="flb-spinner">		<img src="https://floatbot.ai/portal/wbot/loader_image.gif">	</div>	<section class="flb-body" id="flb-body" onscroll="flb.onBodyScroll(this)">			</section>	<footer class="flb-footer">		<div id="snackbar"></div>		<div id="flb-bar-holder"></div>		<div id="flb-reconnect-holder"class="flb-reconnect-holder">Reconnecting</div>		<div id="flb-new-conv-btn" onclick="flb.newConversation()">			<div>Start New Conversation</div>		</div>		<div class="flb-input-holder" id="flb-input-holder">					<div class="flb-input-sec">				<div id="flb-restart-button" class="flb-click-anm" title="Restart" onclick="flb.sockemit(\'start\',{sid: flb.latestSession});">					<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="25px" height="25px" viewBox="0 0 25 25" enable-background="new 0 0 25 25" xml:space="preserve"><rect x="2.802" y="8.016" width="20.593" height="2.86"></rect><rect x="2.802" y="14.45" width="20.593" height="2.86"></rect><rect x="2.802" y="20.884" width="20.593" height="2.86"></rect></svg>				</div>								<input id="flb-input" autocomplete="off" spellcheck="true"maxlength="200" placeholder="Type your message ..." type="text" style="direction: ltr;">				<div onclick="flb.sendTextMessage()" class="flb-click-anm" id="flb-send-msg-btn">					<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="25px" height="25px" viewBox="0 0 25 25" enable-background="new 0 0 25 25" xml:space="preserve"><path d="M21.457,3.58c0.226,0.165,0.319,0.384,0.278,0.658L19.102,20.03c-0.034,0.199-0.144,0.353-0.329,0.463c-0.096,0.055-0.202,0.082-0.319,0.082c-0.075,0-0.158-0.017-0.247-0.051l-4.657-1.902l-2.488,3.033c-0.123,0.158-0.291,0.236-0.504,0.236c-0.089,0-0.164-0.014-0.226-0.041c-0.13-0.048-0.235-0.129-0.314-0.242S9.9,21.37,9.9,21.233v-3.588l8.883-10.888l-10.991,9.51l-4.061-1.666c-0.254-0.096-0.391-0.284-0.411-0.565c-0.014-0.274,0.096-0.476,0.329-0.607L20.758,3.56c0.103-0.062,0.212-0.093,0.329-0.093C21.224,3.467,21.347,3.505,21.457,3.58z"></path></svg>				</div>							</div>				</div>		<div>						<div class="flb-powered-text">							<i>					<svg class="flb-powered-ic" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 9.15 12.64"><g data-name="Layer 2"><g data-name="Layer 1"><path fill="#fcf4a0" d="M6.58.75L.75 7.06h3.54l-1.95 4.83L8.4 5.24H4.57L6.58.75z"></path><path d="M6.58.75l-2 4.49H8.4l-6.06 6.65 2-4.83H.75L6.58.75m0-.75a.67.67 0 0 0-.37.11.65.65 0 0 0-.21.13L.2 6.55a.75.75 0 0 0 .55 1.26h2.43l-1.54 3.8a.76.76 0 0 0 .3.92.8.8 0 0 0 .4.11.74.74 0 0 0 .55-.24L9 5.75a.75.75 0 0 0-.6-1.26H5.73L7.24 1.1a.68.68 0 0 0 .09-.35.75.75 0 0 0-.74-.75zm0 1.5z" fill="#f4a51f"></path></g></g></svg>				</i>&nbsp;by&nbsp;<b><a id="power-by-btn" href="https://floatbot.ai?utm_source=floatbot.ai&amp;utm_medium=website&amp;utm_campaign=f_client" target="_blank" rel="noopener" style="text-decoration:none;color:#e1464d !important;font-family: sans-serif;font-size: 12px;">Floatbot</a>				</b>						</div>		</div>	</footer></div><div id="flb-full-modal" class="flb-full-modal" ></div><div class="flb-widget-handle" id="flb-widget-handle" onclick="flb.maximizeBot()"><span id="flb-u-msg-cnt" style="display:none">1</span>	<div class="flb-widget-open-ico"></div></div><div id="flb-headsup-popup"></div>';
	document.body.appendChild(div);

	/*var linkNode = document.createElement("link"); 
linkNode.type = "text/css"; 
linkNode.rel = "stylesheet"; 
linkNode.href = "//fonts.googleapis.com/css?family=Noto+Sans";
document.head.appendChild(linkNode);*/
window.flb = {
	botId: '6319e36c62d2f23ffa5572e6',
	base_url: 'https://floatbot.ai/portal/chatbot/',
	isInitialized: false,
	latestSession: '',
	currentSession: '',
	socket: null,
	connected: false,
	firstload: false,
	chatTarget: 'bot',
	lastMessagets: 0,
	lastScrollTop: 0,
	activeScreen: 'chat',
	msgHash: {},
	config: JSON.parse('{"title":"BOI SEVA","themeColor":"#0075be","headerColor":"#0075be","messageColor":"#ecd0d7","buttonColor":"#a11638","labelColor":"#FFFFFF","botLabel":"Bank Of India","showLabel":0,"botLogo":"1638.png","botPosition":0,"enablePoweredBy":1,"mapApiKey":"","zendeskChatKey":"","speechRecognition":1,"speechRecognitionLang":"en-US","querySuggestion":0,"autoOpen":0,"hasSpeaker":false,"canSpeak":false,"other":{"bot_title":"BOI SEVA"},"quick_reply_hide_input":false,"params":""}'),

	map: {},
	items: {
		form_text_item: function (data) {
			var html = '';

			var originalTxt = data.message.items.data.text;
			var markedTxt = originalTxt;
			
			try{
				markedTxt = marked.parse(originalTxt);
			}catch(e){}
			
			var flbrlp = (markedTxt.length >= (originalTxt.length + 3) )?decodeEntities(markedTxt):flb.util.urlify(decodeEntities(originalTxt));

			var feedback = '';
			if(data.from != "chatHistory" && data.sender_type=="bot" && data.ai && (data.ai=="1" || data.ai==1) && flbrlp.length>10){
				
				feedback+='<div class="sentiment-holder" id="snt_'+data.reply_to+'"><button class="icon-bounce-btn like" title="Like" onclick="flb.emit(\'sentiment\',{button:\'1\',ele:this,ts:\''+data.reply_to+'\'})" ></button><button class="icon-bounce-btn unlike" title="Dislike" onclick="flb.emit(\'sentiment\',{button:\'0\',ele:this,ts:\''+data.reply_to+'\'})" ></button></div>';
			}

			html += '<span class="flb-text-view" title="'+flb.util.parseDate(data.ts)+'" >' + flbrlp + feedback + '</span>';
			html += '<div class="flb-button-view">';
			//html += '<div class="flb-msg-timestamp">' + flb.util.parseDate(data.ts) + '</div>';
			if ('buttons' in data.message.items.data && data.message.items.data.buttons.length) {
				html += '<ul class="flb-action-buttons">';
				for (var j = 0; j < data.message.items.data.buttons.length; j++) {
					var button = data.message.items.data.buttons[j];
					if (button.type == 'url') {
						if (typeof button.target !== 'undefined' && button.target) {
							html += '<li onclick="flb.util.openURL(\'' + button.link.replace(/'/g, " ") + '\')">' + flb.util.escapeHTML(button.title) + '</li>';
						}
						else {
							html += '<li onclick="window.open(\'' + button.link.replace(/'/g, " ") + '\',target=\'_blank\')">' + flb.util.escapeHTML(button.title) + '</li>';
						}
					}
					if (button.type == 'flow') {
						html += '<li onclick="flb.flbChangeFlow(\'' + flb.util.escapeHTML(button.title.replace(/'/g, "\\'")) + '\',\'' + button.redirect + '\')">' + flb.util.escapeHTML(button.title) + '</li>';
					}

					if (button.type == 'buy') {
						html += '<li onclick="flb.util.openURL(\'' + button.payurl.replace(/'/g, " ") + '\')">' + flb.util.escapeHTML(button.title) + ' (' + button.price + ' ' + button.currency + ')</li>';
					}
				}
				html += '</ul>';
			}/*else if(data.sender_type=="bot" && data.ai && (data.ai==="1" || data.ai===1) && flbrlp.length>10){
				var ts = data.time;
				html+='<div class="sentiment-holder"><button class="icon-bounce-btn like" onclick="api.emit(\'sentiment\',{button:\'like\',ele:this,ts:\''+ts+'\'})" ></button><button class="icon-bounce-btn unlike" onclick="api.emit(\'sentiment\',{button:\'unlike\',ele:this,ts:\''+ts+'\'})" ></button></div>';
			}*/

			var maxSuggestions = 5;
			if ('suggestions' in data.message.items.data) {
				if (data.message.items.data.text == "Related Queries.") {
					maxSuggestions = 3;
				}
				html = '<div class="flb-sims-query">';
				html += '<span class="flb-sims-title">' + flbrlp + '</span>';
				html += '<ul class="suggested">';
				var className = Math.floor(Math.random() * 1000 + 1);
				var suggestion, counter = 0, viewMoreBtn = '<li class="view-more more-' + className + '" onclick="flb.simsQuery.viewMore(' + className + ')" >View more</li>';
				for (suggestion in data.message.items.data.suggestions) {
					if (data.message.items.data.suggestions.hasOwnProperty(suggestion)) {
						counter++;
						if (counter > maxSuggestions) {
							html += viewMoreBtn;
							viewMoreBtn = '';
							html += '<li style="display:none" class="sims-' + className + '" onclick="flb.simsQuery.send(this)" >' + data.message.items.data.suggestions[suggestion] + '</li>';
						} else {
							html += '<li onclick="flb.simsQuery.send(this)" >' + data.message.items.data.suggestions[suggestion] + '</li>';
						}
					}
				}
				html += '</ul>';
			}
			html += '</div>';

			return { html: html, title: flbrlp };
		},

		form_info_item: function (data) {
			var msgText = (typeof data.message != 'undefined') ? data.message.items.data.text : data.flow_data.items.data.text;
			var html = '<div class="flb-info-msg">';
			html += '<div>' + msgText + '</div>';
			html += '</div>';
			return { html: html, title: msgText };
		},

		form_login_item: function (data) {
			var flbrlp = flb.util.urlify(decodeEntities(data.message.items.data.text));

			var html = '<div><span class="flb-text-view" title="' + flb.util.parseDate(data.ts) + '" >' + flbrlp + '</span>';
			html += '<div class="flb-button-view">';
			//html += '<div class="flb-msg-timestamp">' + flb.util.parseDate(data.ts) + '</div>';
			if ('buttons' in data.message.items.data) {
				html += '<ul class="flb-action-buttons">';
				for (var j = 0; j < data.message.items.data.buttons.length; j++) {
					var openAsPopup = data.message.items.data.open_as_popup || 0;
					var button = data.message.items.data.buttons[j];
					html += '<li onclick="flb.util.openURL(\'' + button.link + '\',' + openAsPopup + ')">' + flb.util.escapeHTML(button.title) + '</li>';
				}
				html += '</ul>';
			}
			html += '</div></div>';
			return { html: html, title: flbrlp };
		},

		form_user_input_item: function (data) {

			var html = '<span class="flb-text-view" title="' + flb.util.parseDate(data.ts) + '" >' + flb.util.urlify(decodeEntities(data.message.items.data.title)) + '</span>';
			//html += '<div class="flb-msg-timestamp">' + flb.util.parseDate(data.ts) + '</div>';
			if (data.message.items.data.type == "attachment" && data.from && data.from == 'comm') {
				flb.attachment.showUploader();
				/*setTimeout(function(){
					$$("#flb-chatbox-input-box").hide();
				},100);
				$$("#flb-file-upload-holder").show();
				$$(".file-upload-dv").show();
				$$("#flb-file-upload-progress").hide();*/
			}else if (data.message.items.data.type == "phone" && data.from == 'comm') {
				setTimeout(function () {
					flb.getElements("#flb-input")[0].type = 'tel';
				}, 500);
			}else if(data.message.items.data.type == "date" && data.from == 'comm'){
			
				try{
					flb.getElements(".flb-container-calendar")[0].remove();
				}catch(err) {}
				html += '<div class="flb-container-calendar"> <div class="flb-button-container-calendar"> <button id="flb-cal-previous" onclick="flb.calendar.previous()">&#8249;</button> <div class="flb-footer-container-calendar"> <select id="flb-month" onchange="flb.calendar.jump()"> <option value=0>Jan</option> <option value=1>Feb</option> <option value=2>Mar</option> <option value=3>Apr</option> <option value=4>May</option> <option value=5>Jun</option> <option value=6>Jul</option> <option value=7>Aug</option> <option value=8>Sep</option> <option value=9>Oct</option> <option value=10>Nov</option> <option value=11>Dec</option> </select> <select id="flb-year" onchange="flb.calendar.jump()"></select> </div> <button id="flb-cal-next" onclick="flb.calendar.next()">&#8250;</button> </div> <table class="flb-table-calendar" data-lang="en"> <thead id="flb-thead-month"></thead> <tbody id="flb-calendar-body"></tbody> </table> </div>';
				flb.calendar.conf = {dateFormat: null, minDate: null};
				if(typeof data.message.items.data['min_date'] != 'undefined' && data.message.items.data['min_date']){
					flb.calendar.conf = { minDate: new Date() };
					if(data.message.items.data['min_date']!='CURRENT'){
						flb.calendar.conf.minDate = new Date(data.message.items.data['min_date']);
					}
				}

				if(typeof data.message.items.data['dateFormat'] != 'undefined' && data.message.items.data['dateFormat']){
					flb.calendar.conf.dateFormat = data.message.items.data['dateFormat']
				}

				setTimeout(function () {
					flb.calendar.init();
					flb.util.scrollBottom('#flb-body');
				}, 100);
			}

			if(data.message.items.data.hide_user_input) {
				flb.util.disableInput();
			}
			return { html: html, title: data.message.items.data.title };
		},

		form_quick_reply_item: function (data) {
			var html = '<span class="flb-text-view" title="' + flb.util.parseDate(data.ts) + '">' + flb.util.urlify(data.message.items.data.text) + '</span>';
			//html += '<div class="flb-msg-timestamp">' + flb.util.parseDate(data.ts) + '</div>';
			html += '<div class="flb-quick-reply-buttons">';

			if(flb.latestSession == flb.currentSession){

				if (typeof data.message.items.data.as_dropdown != 'undefined' && data.message.items.data.as_dropdown) {

					var optId = 'options' + Math.floor(Math.random() * 10);
					html += "<div class='quick-slect' id='" + optId + "'>";
					html += '<input class="slect-search" type="text" onkeyup="flb.util.filterQuickReply(this,\'' + optId + '\')" placeholder="Search">';
					html += '<ul class="options">';
					for (j = 0; j < data.message.items.data.buttons.length; j++) {
						var option = flb.util.escapeHTML(data.message.items.data.buttons[j].title);
						var key = data.message.items.data.buttons[j].key || option;
						var redirect = data.message.items.data.buttons[j].redirect || '';
						html += '<li class="quick-opt" onclick="flb.flbChangeFlow(\'' + option + '\',\'' + redirect + '\',\'' + key + '\')" data-key="' + key + '" data-redirect="' + redirect + '">' + option + '</li>';
					}
					html += '</li>';

				} else {

					for (var j = 0; j < data.message.items.data.buttons.length; j++) {
						var key = data.message.items.data.buttons[j].key || '';
						if(typeof data.message.items.data.buttons[j].redirect == 'undefined'){
							data.message.items.data.buttons[j].redirect = '';
						}
						var listClass = (typeof data.message.items.data['asList'] != 'undefined' && data.message.items.data['asList'] != '') ? 'list' : '';

						if (data.message.items.data.buttons[j].title) {
							if (typeof data.message.items.data.buttons[j]['icon_url'] != 'undefined' && data.message.items.data.buttons[j]['icon_url'] != '') {
								html += '<span class="flb-action-elem img ' + listClass + '" onclick="flb.flbChangeFlow(\'' + flb.util.escapeHTML(data.message.items.data.buttons[j].title.replace(/'/g, "\\'")) + '\',\'' + data.message.items.data.buttons[j].redirect + '\',\'' + flb.util.escapeHTML(key) + '\')">';
								html += '<img height="25px" src="' + data.message.items.data.buttons[j]['icon_url'] + '">';
								html += decodeEntities(data.message.items.data.buttons[j].title);
								html += '</span>';
							} else {
								html += '<span class="flb-action-elem ' + listClass + '" onclick="flb.flbChangeFlow(\'' + flb.util.escapeHTML(data.message.items.data.buttons[j].title.replace(/'/g, "\\'")) + '\',\'' + data.message.items.data.buttons[j].redirect + '\',\'' + flb.util.escapeHTML(key) + '\')">';
								html += decodeEntities(data.message.items.data.buttons[j].title);
								html += '</span>';
							}
						}

						/*html+='<span class="flb-action-elem img list" onclick="flb.flbChangeFlow(\''+flb.util.escapeHTML(data.message.items.data.buttons[j].title.replace(/'/g, "\\'"))+'\',\''+data.message.items.data.buttons[j].redirect+'\',\''+flb.util.escapeHTML(key.replace(/'/g, "\\'"))+'\')">';
						html+='<img height="25px" src="https://dev.floatbot.ai/portal/chatbot/images/speech-bubble.png">';
						html+=flb.util.escapeHTML(data.message.items.data.buttons[j].title);
						html+='</span>';*/
					}
				}
			}
			html += '</div>';
			if(data.message.items.data.hide_user_input) {
				flb.util.disableInput();
			}
			return { html: html, title: data.message.items.data.text };
		},

		form_confirm_item: function (data) {

			var html = '<div><span class="flb-text-view" title="' + flb.util.parseDate(data.ts) + '">' + flb.util.escapeHTML(data.message.items.data.text) + '</span>';
			//html += '<div class="flb-msg-timestamp">' + flb.util.parseDate(data.ts) + '</div>';
			html += '<div class="flb-quick-reply-buttons">';
			for (var j = 0; j < data.message.items.data.buttons.length; j++) {
				html += '<span class="flb-action-elem" onclick="flb.flbChangeFlow(\'' + flb.util.escapeHTML(data.message.items.data.buttons[j].title.replace(/'/g, "\\'")) + '\',\'' + data.message.items.data.buttons[j].redirect + '\')">';
				html += flb.util.escapeHTML(data.message.items.data.buttons[j].title);
				html += '</span>';
			}
			html += '</div></div>';
			return { html: html, title: data.message.items.data.text };
		},

		form_code_item: function (data) {
			
			var html = '';
			if(data.message.items.data.code === '--FLB-CALENDAR-INPUT--') {
				try{
					flb.getElements(".flb-container-calendar")[0].remove();
				}catch(err) {}

				if(data.from && data.from === 'comm'){

					html += '<div class="flb-container-calendar"> <div class="flb-button-container-calendar"> <button id="flb-cal-previous" onclick="flb.calendar.previous()">&#8249;</button> <div class="flb-footer-container-calendar"> <select id="flb-month" onchange="flb.calendar.jump()"> <option value=0>Jan</option> <option value=1>Feb</option> <option value=2>Mar</option> <option value=3>Apr</option> <option value=4>May</option> <option value=5>Jun</option> <option value=6>Jul</option> <option value=7>Aug</option> <option value=8>Sep</option> <option value=9>Oct</option> <option value=10>Nov</option> <option value=11>Dec</option> </select> <select id="flb-year" onchange="flb.calendar.jump()"></select> </div> <button id="flb-cal-next" onclick="flb.calendar.next()">&#8250;</button> </div> <table class="flb-table-calendar" data-lang="en"> <thead id="flb-thead-month"></thead> <tbody id="flb-calendar-body"></tbody> </table> </div>';
					flb.calendar.conf = {dateFormat: data.message.items.data.format || null, minDate: null};
					setTimeout(function () {
						
						flb.calendar.init();
						flb.util.scrollBottom('#flb-body');
					}, 100);
				}

			} else {

				html = '<div class="flb-code-item" style="width:100%;">';
				var txt = document.createElement("textarea");
				txt.innerHTML = data.message.items.data.code;
				html += txt.value;
				txt.remove();
				html += '</div>';
			}
			
			return { html: html, title: '' };
		},

		form_image_item: function (data) {

			var html = '';
			if (!data.message.items.data.type && data.message.items.data.type != "url") {
				html += '<div class="flb-item">';
				html += '<img title="' + flb.util.parseDate(data.ts) + '" class="flb-item-image image-loader" onerror="this.style.display=\'none\'" src="' + data.message.items.data.url + '" onclick="flb.viewFullImage(\'' + data.message.items.data.url + '\')" >';
			} else {

				if (data.message.items.data.url.indexOf('full-screen') != -1 || data.message.items.data.hasOwnProperty("full-screen")) {
					if (!flb.loadingChatHistory) {

						flb.util.openBotModal(data.message.items.data.url);
						html = '';
					} else {
						html = '<div style="width:300px">';
						html += '<iframe width="100%" frameborder="0" src="' + data.message.items.data.url + '"></iframe>';
						html += '</div>';
					}

				} else {
					html = '<div style="width:300px">';
					if (!data.message.items.data.url.includes('embed')) {
						html += '<div style="width:300px;position:absolute;height:100%;cursor:pointer;" onclick="window.open(\'' + data.message.items.data.url + '\', \'_blank\');" ></div>';
					}
					html += '<iframe width="100%" frameborder="0" src="' + data.message.items.data.url + '"></iframe>';
					html += '</div>';
				}
			}
			if (html != '') {
				html += '</div>';
				//html += '<div class="flb-msg-timestamp">' + flb.util.parseDate(data.ts) + '</div>';
			}
			return { html: html, title: 'Image' };
		},

		form_cards_item: function (data) {

			var html = '';
			var sliderId = 'slider_' + data.ts;
			var slides = 'slides_' + data.ts;

			html += '<div id=' + sliderId + ' class="slider">';
			html += '<div class="slider-wrapper">';
			html += '<div id=' + slides + ' class="slides">';


			for (var s = 0; s < data.message.items.data.cards.length; s++) {
				var card = data.message.items.data.cards[s];
				console.log(card)
				html += '<span class="flb-slide">';
				if (card.flow_id) {

					html += '<div class="view-more" onclick="flb.load_more_cards(\'' + card.flow_id + '\',' + card.position + ',' + card.flb_json_card_page_no + ',\'' + p + '\')" >';
					html += '<h5>View More</h5>';
					html += '</div>';
				} else {

					html += '<img class="card-wrapper image-loader"  onerror="this.style.display=\'none\'" src="' + card.image_url + '" >';
					html += '<div class="text-item"><a href="'+card.item_url+'" target="_blank"><b>' + card.title + '</b></a></div>';
					html += '<div class="flb-product_description">' + card.subtitle + '</div>';

					if ('buttons' in card) {
						html += '<ul class="text-child-buttons">';
						for (var j = 0; j < card.buttons.length; j++) {
							var button = card.buttons[j];
							if (button.type == 'url') {
								if (typeof button.target !== 'undefined' && button.target) {
									html += '<li onclick="flb.util.openURL(\'' + button.link.replace(/'/g, " ") + '\')">' + button.title + '</li>';
								}
								else {
									html += '<li onclick="window.open(\'' + button.link.replace(/'/g, " ") + '\',target=\'_blank\')">' + button.title + '</li>';
								}
							}
							if (button.type == 'flow') {
								var card_key = flb.util.escapeHTML(button.title.replace(/'/g, "\\'"));
								if (typeof button.key != "undefined") {
									card_key = button.key;
								}
								card_key += "_buttonId";
								html += '<li onclick="flb.flbChangeFlow(\'' + flb.util.escapeHTML(button.title.replace(/'/g, "\\'")) + '\',\'' + button.redirect + '\',\'' + card_key + '\')">' + button.title + '</li>';
							}
							if (button.type == 'buy') {
								var pay_url = button.payurl.replace(/'/g, " ");
								html += '<li onclick="flb.util.openURL(\'' + pay_url + '\')">' + button.title + ' (' + button.price + ' ' + button.currency + ')</li>';
							}
						}
						html += '</ul>';
					}
				}
				html += '</span>';
			}

			html += '</div>';
			html += '</div>';

			html += '<a id="prev' + data.ts + '" class="control prev"></a>';
			html += '<a id="next' + data.ts + '" class="control next"></a>';
			html += '<div class="flb-msg-timestamp">' + flb.util.parseDate(data.ts) + '</div>';
			html += '</div>';



			setTimeout(function () {
				var slider = flbDOM.querySelector('#' + sliderId),
					sliderItems = flbDOM.querySelector('#' + slides),
					prev = flbDOM.querySelector('#prev' + data.ts),
					next = flbDOM.querySelector('#next' + data.ts);
				flb.util.slide(slider, sliderItems, prev, next);

			}, 500);
			return { html: html, title: '' };
		},

		form_location_item: function (data) {
			var html = "";
			if (data.from && data.from == "chatHistory") {
				var map = flb.base_url + "images/world-map.jpg";
				html += '<div class="flb-item" title="' + flb.util.parseDate(data.ts) + '">';
				html += '<img class="flb-item-image image-loader" src="' + map + '">';
				html += '</div>';
				//html += '<div class="flb-msg-timestamp">' + flb.util.parseDate(data.ts) + '</div>';
			} else {
				var change_btn_label = data.message.items.data.change_btn_label;
				var proceed_btn_label = data.message.items.data.proceed_btn_label;
				var pick_btn_label = data.message.items.data.pick_btn_label;

				if (data.message.items.data.longitude && data.message.items.data.latitude) {
					//if already available
					flb.longitude = data.message.items.data.longitude;
					flb.latitude = data.message.items.data.latitude;
					displayLocation(flb.longitude, flb.latitude);
				} else {

					if (navigator.geolocation) {
						navigator.geolocation.getCurrentPosition(function (position) {
							flb.longitude = position.coords.longitude;
							flb.latitude = position.coords.latitude;
							displayLocation(position.coords.longitude, position.coords.latitude);
						}, function (error) {
							displayLocation(0, 0);
						});
					} else {
						flb.emit("error", "Geolocation is not supported by this browser.");
					}
				}

				function displayLocation(longitude, latitude) {
					var html = "";
					var ts = new Date().getTime();

					if (longitude === 0 && latitude === 0) {
						//var map = "https://maps.googleapis.com/maps/api/staticmap?center=24.327449,78.652792&zoom=2&size=300x250&sensor=false&key="+appcore.mapApiKey;
						var map = flb.base_url + "images/world-map.jpg";
						//current location not available
						html += '<span class="flb-text-view">';
						html += '<div class="flb-map-image" style="background-image: url(' + map + ');background-size:300px 210px !important">';
						html += '</div>';
						html += '<ul class="flb-action-buttons map-btn">';
						html += '<li><b><a style="cursor:pointer;" onclick="flb.loadGeoMap()">' + pick_btn_label + '</a></b></li>';
						html += '</ul>';
						html += '</span>'

					} else {
						var map = "https://maps.googleapis.com/maps/api/staticmap?center=" + latitude + "," + longitude + "&markers=" + latitude + "," + longitude + "&zoom=12&size=300x250&sensor=false&key=" + flb.config.mapApiKey;

						var addressId = "map_" + Math.floor(Math.random() * 100);
						html += '<span class="flb-text-view">';
						html += '<div class="flb-map-image" onclick="flb_large_image(\'' + map + '\')" style="background-image: url(' + map + ')">';
						html += '</div>';
						html += '<div class="map-address" id="' + addressId + '"></div>';
						html += '<ul class="flb-action-buttons map-btn">';
						html += '<li><b><a style="cursor:pointer;" onclick="flb.loadGeoMap()">' + change_btn_label + '</a></b></li>';
						html += '<li><b><a style="cursor:pointer;" onclick="flb.sendLocation(0,1)">' + proceed_btn_label + '</a></b></li>';
						html += '</ul>';
						html += '</span>';

						flb.httpGET("https://maps.googleapis.com/maps/api/geocode/json?latlng=" + latitude + "," + longitude + "&sensor=true&key=" + flb.config.mapApiKey, function (res) {
							setTimeout(function () {
								flb.getElements("#" + addressId)[0].innerHTML = res.results[3]['formatted_address'];
								//flb.util.scrollBottom('#flb-body');
							}, 200);
						});

					}
					html += '<div class="flb-msg-timestamp">' + flb.util.parseDate(data.ts) + '</div>';
					flb.send_msg_to_ui({ html: html, title: '' }, data, 1);

				}
			}
			return { html: html, title: '' };
		},
		form_file_item: function (data) {

			var fileUI = "<span class='flb-text-view'>";
			if (typeof data.message.full_path != 'undefined' && data.message.full_path.match(/\.(jpeg|jpg|gif|png)$/) != null) {
				fileUI += "<img style='max-width:99%;max-height: 150px;' src='" + data.message.full_path + "' >";
			} else if (typeof data.message.filename != 'undefined' && data.message.filename.match(/\.(jpeg|jpg|gif|png|PNG)$/) != null) {
				fileUI += "<img style='max-width:99%;max-height: 150px;' src='https://floatbot.ai/api/v1/user/attachment/?path=" + flb.botId + "/" + flb.currentSession + "/" + data.message.fid.toLowerCase() + "'>";
			} else {
				fileUI += "<span><b>Attachment</b><span>";
			}
			fileUI += "<div title='" + flb.util.parseDate(data.ts) + "' >" + data.message.filename + "</div>";
			//fileUI += "<div class='flb-msg-timestamp'>" + flb.util.parseDate(data.ts) + "</div>";
			fileUI += "</span>";
			return { html: fileUI, title: '' };
		},
		form_change_asr_item: function (data) {
			
			flb.emit("interaction", {event: 'change-language', label:data.message.items.data.languageCode});
			return false;
		},
	},
	emit: function (type, data) {
		if (this.map[type]) {
			
			for(var i=0;i<this.map[type].length;i++){
				this.map[type][i](data);
			}
		}
	},
	on: function (type, handler) {
		if (!this.map[type]) {
			this.map[type] = [];
		}
		this.map[type].push(handler);
	},
	init: function (new_ses_on_init) {
		//show otp login screen
		if (flb.config.other && typeof flb.config.other.login_with_otp != 'undefined' && flb.config.other.login_with_otp && (!localStorage[this.botId + 'params'] || localStorage[this.botId + 'params'] == '')) {
			flb.util.showElements("#otp-screen");
			return false;
		} else if (flb.config.other && typeof flb.config.other.login_with_otp != 'undefined' && flb.config.other.login_with_otp && this.config.params == '') {
			this.config.params = localStorage[this.botId + 'params'];
		}

		new_ses_on_init = (typeof new_ses_on_init == 'undefined' || !new_ses_on_init) ? false : true;
		if (this.botId && localStorage[this.botId + 'flbai_token'] && typeof localStorage[this.botId + 'flbai_bot_user_id'] != 'undefined' && typeof localStorage[this.botId + 'flbai_bot_with_user_id'] != 'undefined' && typeof localStorage[this.botId + 'flbai_token'] != 'undefined') {
			if (this.config.params === localStorage[this.botId + 'params']) {
				this.connectSocket();
			} else {
				this.startSession();
			}
		} else {
			this.startSession();
		}
	},
	startSession: function () {
		var self = this;
		var data = { bot_id: this.botId, device_type: "3" };
		flb.emit("newConversation", {});
		if (typeof navigator.userAgent !== 'undefined' && navigator.userAgent != '') {
			data['model'] = navigator.userAgent;
		}
		if (this.config.params && this.config.params.length > 32) {
			data['params'] = this.config.params;
			localStorage.removeItem(this.botId + 'flbai_bot_with_user_id');
		}

		if(flb.config.deviceType && typeof flb.config.deviceType != 'undefined'){
			data['device_type'] = flb.config.deviceType;
		}

		var xmlHttp = new XMLHttpRequest();
		xmlHttp.open("POST", 'https://floatbot.ai/api/' + 'init');
		xmlHttp.setRequestHeader("Content-Type", "application/json");
		xmlHttp.onreadystatechange = function () {
			if (xmlHttp.readyState == 4 && xmlHttp.status == 200) {
				var json_obj = JSON.parse(xmlHttp.responseText);
				if ('flb_uid' in json_obj && 'token' in json_obj) {
					self.latestSession = self.currentSession = json_obj.sid;
					localStorage.setItem(self.botId + "flbai_bot_user_id", json_obj.flb_uid);
					//if(flb.config.params && flb.config.params.length>32){
					localStorage.setItem(self.botId + "params", flb.config.params ? flb.config.params : '');
					//}
					//if(!self.config.params || self.config.params==""){
					localStorage.setItem(self.botId + "flbai_bot_with_user_id", self.botId + "-" + json_obj.flb_uid);
					//}
					localStorage.setItem(self.botId + "flbai_token", json_obj.token);
					self.connectSocket();
				}
			}
		}
		xmlHttp.send(JSON.stringify(data));
	},
	sockemit: function (type, message) {

		try {
			if (type != "raw") {
				message.sockType = type;

				/*console.log(message);*/
				flb.socket.send(JSON.stringify(message));
			} else {
				if (!flb.socket || flb.socket.readyState != 1) {
					/* appcore.tryReconnect(1000,3000);*/
				} else {
					flb.socket.send(message);
				}
			}
			if(type == 'start'){
				flb.emit("interaction", {event: 'restart', action :'start-over' , label:'Restart Icon'});
			}
		} catch (error) { }
	},
	httpGET: function (url, callback) {
		var xmlhttp = new XMLHttpRequest();
		xmlhttp.onreadystatechange = function () {
			if (this.readyState == 4 && this.status == 200) {
				var response = JSON.parse(this.responseText);
				callback(response);
			}
		};
		xmlhttp.open("GET", url, true);
		xmlhttp.send();
	},
	getElements: function (selector) {
		var elements = [];
		if (selector.lastIndexOf('#', 0) === 0) {
			var element = flbDOM.querySelector(selector);
			if (element) {
				elements.push(element);
			}
		} else {
			elements = flbDOM.querySelectorAll(selector);
		}
		return elements;
	},
	onCustomButtonClick : function(data){

		if(data){

			this.sockemit("onCustomButtonClick", {
				sid: flb.latestSession,
				target: flb.botId,
				data: data
			});
		}
	},
	maximizeBot: function () {
		this.getElements("#flb-bot")[0].classList.add("animate__zoomIn");
		this.util.showElements("#flb-bot");
		if (!this.isInitialized) {
			this.init();
			flb.pushNotify('INIT');
		}

		this.getElements("#flb-widget-handle")[0].classList.add("flb-fade-out");
		flb.emit("interaction", {event: 'chatbot-open'});
		flb.emit("maximizeBot", {});

		this.getElements("#flb-u-msg-cnt")[0].style.display = 'none';
		flb.unReadMsgCnt = 0;

	},
	minimizeBot: function () {
		
		// if(flb.chatTarget == "bot"){
			this.util.hideElements("#flb-bot");
			this.getElements("#flb-bot")[0].classList.remove("animate__zoomIn");
			this.getElements("#flb-widget-handle")[0].classList.remove("flb-fade-out");
			flb.emit("interaction", {event: 'chatbot-close'});
			flb.emit("minimizeBot", {});
		// }else{
		//	flb.util.showElements("#end-convo-popup");
		// }
		//flb.util.isBotOpen();
	},
	endConversation: function() {
		flb.sockemit("leavechat", { sid: flb.latestSession });
		flb.util.hideElements("#end-convo-popup");
		this.util.hideElements("#flb-bot");
		this.getElements("#flb-bot")[0].classList.remove("animate__zoomIn");
		this.getElements("#flb-widget-handle")[0].classList.remove("flb-fade-out");
		flb.emit("interaction", {event: 'chatbot-close'});
		flb.emit("minimizeBot", {});
	},
	viewConversations: function () {
		flb.lastScrollTop = 0;
		flb.activeScreen = 'conversations';
		this.util.hideElements("#open-session-list-btn");
		this.util.hideElements("#flb-input-holder");
		this.util.showElements("#flb-new-conv-btn");
		this.sockemit("getConversations", {});
		flb.emit("interaction", {event: 'session',action:'view-session', label: 'Session Icon'});
		flb.emit("VIEW_CONVERSATIONS", {});
	},
	newConversation: function () {
		this.util.showElements("#open-session-list-btn", 'inline-block');
		this.util.showElements("#flb-input-holder");
		this.util.hideElements("#flb-new-conv-btn");
		this.getElements("#flb-body")[0].innerHTML = '';
		flb.emit("newConversation", {});
		flb.emit("interaction", {event: 'session',action:'new-session', label: 'Start New Conversation'});
		this.sockemit('newSession', {});
		flb.chatTarget = 'bot';
		flb.activeScreen = 'chat';
	},
	viewChat: function (sessionId) {
		flb.lastMessagets = 0;
		flb.activeScreen = 'chat';
		var data = {
			sockType: "chatHistory",
			sid: sessionId,
			target: localStorage[this.botId + 'flbai_bot_user_id'],
			ts: flb.lastMessagets
		};
		this.currentSession = sessionId;

		this.util.showElements("#open-session-list-btn", 'inline-block');

		if (this.latestSession == this.currentSession) {
			this.util.showElements("#flb-input-holder");
			this.util.hideElements("#flb-new-conv-btn");
		} else {
			this.util.showElements("#flb-new-conv-btn");
			this.util.hideElements("#flb-input-holder");
		}

		flb.msgHash[this.currentSession] = {};
		this.util.showElements("#flb-spinner");
		flb.getElements('#flb-body')[0].innerHTML = '';
		this.sockemit("chatHistory", data);

	},
	flbChangeFlow: function (flowText, flowId, reply_key) {

		var data = {
			sockType: "comm",
			target: flb.botId,
			sid: flb.latestSession,
			flow_data: {
				text: flowText,
				new_flow_id: flowId,

			},
			type: "message",
			ts: new Date().getTime()
		};

		if (typeof reply_key != 'undefined') {
			if (reply_key.indexOf('_buttonId') != -1) {
				data['flow_data']['card_id'] = reply_key.replace("_buttonId", '');
			}
		}
		this.sockemit("comm", data);
		data['sender_type'] = 'user';
		data['message'] = {
			text: flowText,
			type: 'text',
		};

		flb.parseMessage(data, 1);
		flb.emit("CHANGE_FLOW", { name: flowText, flowId: flowId });
		flb.emit("interaction", {event: 'button-click',action: 'start-flow', label: flowText});
		return false;
	},
	sendTextMessage: function () {

		var input = flb.getElements("#flb-input")[0];
		var inputText = input.value.trim();
		
		if (inputText == '' || /<\/?("[^"]*"|'[^']*'|[^>])*(>|$)/g.test(inputText)) {

			if( inputText!='' ){
				flb.emit("error", "Please enter a valid input");
			}

			return false;
		}

		var enableMasking = false;
		if(flb.lastItem && flb.lastItem.message && flb.lastItem.message.items && flb.lastItem.message.items.data && flb.lastItem.message.items.data.enableMasking){
			enableMasking = true;
			flb.lastItem.message.items.data.enableMasking = false;
		}
		
		var data = {
			sockType: "comm",
			sid: flb.latestSession,
			target: flb.botId,
			flow_data: {
				text: inputText,
				type: "text",
			},
			type: "message",
			sender_type: "user",
			ts: new Date().getTime(),
			enableMasking: enableMasking
		};

		flb.sockemit('comm', data);
		data.message = { text: enableMasking? '********'+ inputText.slice(-2) : inputText };
		flb.emit("interaction", {event: 'query', action:'user-query', query: inputText});
		
		flb.parseMessage(data, 1);
		input.value = '';
		input.type = 'text';
		/*if(flb.chatTarget == "bot"){
			flb.typing.show();
		}*/
		if (flb.chatTarget && flb.chatTarget == 'zendesk') { //zendesk agent chat
			flb.sendZendeskChatMsg({ message: inputText });
		}
	},
	send_msg_to_ui: function (msg, data, append) {
		var html = '';

		if (data.sender_type == 'user') {
			html = '<div class="flb-user-msg">' + msg.html + '</div>';

		} else {
			html = '<div class="flb-bot-msg"><div>' + msg.html + '</div></div>';
			
			if(!flb.util.isBotOpen()){
				flb.unReadMsgCnt ++;
				var notyCntr = this.getElements("#flb-u-msg-cnt")[0];
				notyCntr.innerText = flb.unReadMsgCnt;
				notyCntr.style.display = 'block';
			}

			if(msg.title && msg.title.length && !document.hasFocus()){
				flb.pushNotify(msg.title);
			}

		}

		if (append) {
			this.util.hideElements(".flb-quick-reply-buttons");
			this.util.appendHtml('#flb-body', html);

			// flb.util.scrollBottom('#flb-body');
	
			if(!data.from || data.from != 'comm'){
			
				flb.util.scrollBottom('#flb-body');
		   
			} else if(!flb.msgInscroll) {
				
				var msgs = flb.getElements(".flb-bot-msg");
				var msgLen = msgs.length-1;
				flb.msgInscroll = true;
				setTimeout(() => {
					flb.msgInscroll = false;
					msgs[msgLen].scrollIntoView({ behavior: 'smooth' });
				}, 200);
			} 

		} else {
			this.util.prependHtml('#flb-body', html);
			this.util.hideElements(".flb-quick-reply-buttons");
			var element = flb.getElements('#flb-body')[0];
			element.scrollTop = 200;

		}
	},
	parseMessage: function (data, append) {
		//console.log(data,append);
		//$$("#flb-file-upload-holder").hide();
		//flb.typing.hide();

		flb.util.enableInput();
		if (typeof flb.msgHash[this.currentSession][data.ts] == 'undefined') {
			flb.msgHash[this.currentSession][data.ts] = 1;
			if ('message' in data && typeof data.message.items != 'undefined') {

				if (typeof flb.items['form_' + data.message.items.type + '_item'] != "undefined") {

					var item = flb.items['form_' + data.message.items.type + '_item'](data);
					if(item){
						flb.send_msg_to_ui(item, data, append);
					}

				} else {
					//console.log("Unsupported Item");
				}

				if(item && typeof item.title != 'undefined' && item.title!='' && data.from && data.from=='comm'){
					flb.emit("playText", item.title);
				}

				//$$(".thinkingGif").remove();
			} else if (data.message && data.message.type && data.message.type == 'file') {
				var item = flb.items['form_file_item'](data);
				if(item){
					flb.send_msg_to_ui(item, data, append);
				}

			} else if (data.message && data.message.type && data.message.type == 'location') {
				flb.latitude = data.message.text.latitude;
				flb.longitude = data.message.text.longitude;
				flb.sendLocation(1, append);
			} else if (data.message && data.message.text) {

				var html = "";

				html += '<span class="flb-text-view" title="' + flb.util.parseDate(data.ts) + '" >' + flb.util.urlify(decodeEntities(data.message.text)) + '</span>';
				//html += '<div class="flb-msg-timestamp">' + flb.util.parseDate(data.ts) + '</div>';

				flb.send_msg_to_ui({ html: html, title: '' }, data, append);
			}
		}

	},
	pushNotify:  function (text) {
		if (!("Notification" in window)) {

		} else if (Notification.permission === "granted") {
			text = decodeEntities(text);
			return false;
			if(text && text != 'INIT'){
			var notification = new Notification('Chat', {
				icon: flb.base_url + '/logo/' + flb.config.botLogo,
				body: text,
			});
			}

		} else if (Notification.permission !== "denied") {
			// Notification.requestPermission().then((permission) => {});
		}
		// User has not granted to show web push notifications via Browser
		// Let's honor his decision and not keep pestering anymore
	},
	onBodyScroll: function (event) {

		var st = event.scrollTop;
		if (st > flb.lastScrollTop) {

		} else {

			if (flb.lastScrollTop < 100 && !flb.getElements('.flb-conversation-summary').length && (typeof flb.isLoadingHistory == 'undefined' || !flb.isLoadingHistory)) {
				flb.isLoadingHistory = true;
				var data = {
					sockType: "chatHistory",
					sid: flb.currentSession,
					target: localStorage[flb.botId + 'flbai_bot_user_id'],
					ts: flb.lastMessagets
				};

				flb.sockemit('chatHistory', data);
			}
		}
		flb.lastScrollTop = st <= 0 ? 0 : st;
	},
	viewFullImage: function (url) {
		var html = '<img class="flbmodal-content" src="' + url + '">';
		html += '<span class="flb-close-modal" onclick="flb.util.hideElements(\'.flb-full-modal\')">×</span>';
		var modal = flb.getElements("#flb-full-modal")[0];
		modal.innerHTML = html;
		modal.style.visibility = "visible";
	},
	sendLocation: function (onlyUI, pree) {
		var map = "https://maps.googleapis.com/maps/api/staticmap?center=" + flb.latitude + "," + flb.longitude + "&markers=" + flb.latitude + "," + flb.longitude + "&zoom=12&size=300x250&sensor=false&key=" + flb.config.mapApiKey;

		var addressId = "map_" + Math.floor(Math.random() * 100);
		var html = '<span class="flb-text-view">';
		html += '<div class="flb-map-image" onclick="flb_large_image(\'' + map + '\')" style="background-image: url(' + map + ')">';
		html += '</div>';
		html += '<div class="map-address" id="' + addressId + '"></div>';
		html += '</span>';

		flb.httpGET("https://maps.googleapis.com/maps/api/geocode/json?latlng=" + flb.latitude + "," + flb.longitude + "&sensor=true&key=" + flb.config.mapApiKey, function (res) {
			setTimeout(function () {
				flb.getElements("#" + addressId)[0].innerHTML = res.results[3]['formatted_address'];
				flb.util.scrollBottom('#flb-body');
			}, 200);
		});
		flb.send_msg_to_ui({ html: html, title: '' }, { sender_type: 'user' }, pree);
		//sendmsg({peer:'me',msg:html,sender_type:'',time:ts,stype:pree,msgRef:{}});
		this.util.hideElements(".map-btn")

		if (!onlyUI) {
			flb.sockemit('comm', { sid: flb.latestSession, flow_data: { text: { latitude: flb.latitude, longitude: flb.longitude }, type: 'location' }, type: 'message', target: flb.botId, ts: new Date().getTime() });
			flb.util.scrollBottom('#flb-body');
		}
	},
	showSnackbar: function (text, color, persistent) {
		var snackbar = flb.getElements("#snackbar")[0];
		snackbar.innerHTML = text;
		snackbar.style.backgroundColor = color;
		snackbar.style.display = 'block';
		if (typeof persistent == 'undefined' || !persistent) {
			setTimeout(function () {
				snackbar.style.display = 'none';
			}, 3000);
		}
	},
	simsQuery: {
		send: function (ele) {
			flb.getElements("#flb-input")[0].value = ele.innerHTML;
			flb.sendTextMessage();
		},
		viewMore: function (className) {
			flb.util.hideElements(".more-" + className);
			flb.util.showElements(".sims-" + className);
			flb.util.scrollBottom('#flb-body');
		},
	},
	attachment: {
		showUploader: function () {

			flb.util.showElements("#flb-bar-holder");
			var uiHolder = flb.getElements("#flb-bar-holder")[0];
			var html = '<label class="file-upload-placeholder" id="flb-file-upload">';
			html += '<svg xmlns="http://www.w3.org/2000/svg" width="20" height="17" viewBox="0 0 20 17"><path d="M10 0l-5.2 4.9h3.3v5.1h3.8v-5.1h3.3l-5.2-4.9zm9.3 11.5l-3.2-2.1h-2l3.4 2.6h-3.5c-.1 0-.2.1-.2.1l-.8 2.3h-6l-.8-2.2c-.1-.1-.1-.2-.2-.2h-3.6l3.4-2.6h-2l-3.2 2.1c-.4.3-.7 1-.6 1.5l.6 3.1c.1.5.7.9 1.2.9h16.3c.6 0 1.1-.4 1.3-.9l.6-3.1c.1-.5-.2-1.2-.7-1.5z"></path></svg>';
			html += '<input name="myFile" type="file" onchange="flb.attachment.onInputChange(this)" style="visibility:hidden;width:5px">';
			html += '<span>Choose file</span>';
			html += '</label>';

			html += '<span id="flb-cancel-upload-btn" onclick="flb.attachment.cancelUpload()"></span>';

			uiHolder.innerHTML = html;
		},
		cancelUpload: function () {
			flb.sockemit("uploadCancel", { sid: flb.latestSession });
			flb.util.hideElements("#flb-bar-holder");
		},
		onInputChange: function (input) {
			var allowedTypes = ["image/png", "image/jpg", "image/jpeg", "image/gif", "application/pdf", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", "application/vnd.openxmlformats-officedocument.wordprocessingml.document"];

			if (input.files[0] && input.files[0].size > 2048 * 1024) {
				flb.emit("error", "File size is too large (Max: 2MB)");

			} else if (input.files[0] && allowedTypes.indexOf(input.files[0].type) == -1) {
				flb.emit("error", "Only Image,doc and pdf file are supported.");

			} else if (input.files[0]) {

				var uiHolder = flb.getElements("#flb-bar-holder")[0];
				uiHolder.innerHTML = '<progress id="flb-file-upload-progress" max="100" value="100"></progress>';

				flb.file = input.files[0];
				flb.sockemit("comm", { target: flb.botId, flow_data: { files: [{ filename: input.files[0].name, filesize: input.files[0].size }], type: "file" }, sid: flb.latestSession, type: 'message', ts: new Date().getTime() });
			}

		},
	},
	typing: {
		show: function () {

			if (!flb.getElements("#typing-style").length) {
				var html = '<div class="flb-bot-msg thinkingGif"><div><span class="flb-text-view">';
				html += '<div class="text-item-view typing-style">';
				html += '<span class="round-dot"></span><span class="round-dot"></span><span class="round-dot"></span>';
				html += '</div>';
				html += '</span></div></div>';

				flb.util.appendHtml("#flb-body", html);
				flb.util.scrollBottom('#flb-body');
			}
		},
		hide: function () {
			var elements = flb.getElements(".thinkingGif");
			for (var i = 0; i < elements.length; i++) {
				elements[i].remove();
			}
		},
	},
	calendar: {
		today: new Date(),
		months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
		init: function(){

			flb.calendar.currentMonth = flb.calendar.today.getMonth(),
			flb.calendar.currentYear = flb.calendar.today.getFullYear(),
			flb.calendar.selectYear = flb.getElements("#flb-year")[0],
			flb.calendar.selectMonth = flb.getElements("#flb-month")[0],
			flb.calendar.createYear = flb.calendar.generate_year_range(1910, 2050),
			
			flb.getElements("#flb-year")[0].innerHTML = flb.calendar.createYear;
		
			var days = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
			
			var $dataHead = "<tr>";
			for (dhead in days) {
				$dataHead += "<th data-days='" + days[dhead] + "'>" + days[dhead] + "</th>";
			}
			$dataHead += "</tr>";
			
			//alert($dataHead);
			flb.getElements("#flb-thead-month")[0].innerHTML = $dataHead;
			
			flb.calendar.showCalendar(flb.calendar.currentMonth, flb.calendar.currentYear);
		},
		generate_year_range: function(start, end) {
			var years = "";
			for (var year = start; year <= end; year++) {
				years += "<option value='" + year + "'>" + year + "</option>";
			}
			return years;
		},
		next: function() {
			flb.calendar.currentYear = (flb.calendar.currentMonth === 11) ? flb.calendar.currentYear + 1 : flb.calendar.currentYear;
			flb.calendar.currentMonth = (flb.calendar.currentMonth + 1) % 12;
			flb.calendar.showCalendar(flb.calendar.currentMonth, flb.calendar.currentYear);
		},
		previous: function() {
			flb.calendar.currentYear = (flb.calendar.currentMonth === 0) ? flb.calendar.currentYear - 1 : flb.calendar.currentYear;
			flb.calendar.currentMonth = (flb.calendar.currentMonth === 0) ? 11 : flb.calendar.currentMonth - 1;
			flb.calendar.showCalendar(flb.calendar.currentMonth, flb.calendar.currentYear);
		},
		jump: function() {
			flb.calendar.currentYear = parseInt(flb.calendar.selectYear.value);
			flb.calendar.currentMonth = parseInt(flb.calendar.selectMonth.value);
			flb.calendar.showCalendar(flb.calendar.currentMonth, flb.calendar.currentYear);
		},
		showCalendar: function(month, year) {
		
			var firstDay = ( new Date( year, month ) ).getDay();
		
			var tbl = flb.getElements("#flb-calendar-body")[0];
		
			
			tbl.innerHTML = "";
		
			
			flb.calendar.selectYear.value = year;
			flb.calendar.selectMonth.value = month;
		
			var date = 1;
			for ( var i = 0; i < 6; i++ ) {
				
				var row = document.createElement("tr");
		
				for ( var j = 0; j < 7; j++ ) {
					if ( i === 0 && j < firstDay ) {
						cell = document.createElement( "td" );
						cellText = document.createTextNode("");
						cell.appendChild(cellText);
						row.appendChild(cell);
					} else if (date > flb.calendar.daysInMonth(month, year)) {
						break;
					} else {
						cell = document.createElement("td");
						cell.setAttribute("data-date", date);
						cell.setAttribute("data-month", month + 1);
						cell.setAttribute("data-year", year);
						cell.setAttribute("data-month_name", flb.calendar.months[month]);
						cell.className = "flb-date-picker";
						cell.innerHTML = "<span>" + date + "</span>";
						cell.onclick = function () {
							var selMonth = (this.getAttribute("data-month")<10)?'0'+this.getAttribute("data-month"):this.getAttribute("data-month");
							var selDay =  (this.getAttribute("data-date")<10)?'0'+this.getAttribute("data-date"):this.getAttribute("data-date");
							var selYear = this.getAttribute("data-year");
							var canSelectData = true;
							if(flb.calendar.conf.minDate){
								var selDate = new Date(''+selYear+'-'+selMonth+'-'+selDay);
								var dateDiff = parseInt((selDate - flb.calendar.conf.minDate) / (1000 * 60 * 60 * 24), 10);
								if(dateDiff<=-1){
									canSelectData = false;
								}
							}
							if(canSelectData){
								try{
									var data = {variables:{timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone}};
									flb.onCustomButtonClick(btoa(JSON.stringify(data)));
								}catch(e){}
								
								if(flb.calendar.conf.dateFormat){
									var devider = '/';
									if(flb.calendar.conf.dateFormat.indexOf('-')!=-1){
										devider = '-';
									}
									var format = flb.calendar.conf.dateFormat.split(devider);
									var dateMap = {'DD':selDay,'MM':selMonth,'YY':selYear,'YYYY':selYear};
									flb.getElements("#flb-input")[0].value = dateMap[format[0]]+devider+dateMap[format[1]]+devider+dateMap[format[2]];
								}else{
									flb.getElements("#flb-input")[0].value = selDay+'-'+selMonth+'-'+selYear;
								}
								flb.getElements(".flb-container-calendar")[0].remove();
								flb.sendTextMessage();
							}else{
								flb.emit("error", "Please choose a future date");
							}
							
						};
		
						if ( date === flb.calendar.today.getDate() && year === flb.calendar.today.getFullYear() && month === flb.calendar.today.getMonth() ) {
							cell.className = "flb-date-picker selected";
						}
						row.appendChild(cell);
						date++;
					}
		
		
				}
		
				tbl.appendChild(row);
			}
		
		},
		daysInMonth: function(iMonth, iYear) {
			return 32 - new Date(iYear, iMonth, 32).getDate();
		}
	},
	util: {
		isMobile: function(){
			return ( window.innerWidth <= 800 )
		},
		appendHtml: function (selector, html) {
			try {
				flb.getElements(selector)[0].insertAdjacentHTML("beforeend", html);
			} catch (e) {
				flb.getElements(selector)[0].innerHTML += html;
			}
		},
		prependHtml: function (selector, html) {
			try {
				flb.getElements(selector)[0].insertAdjacentHTML("afterbegin", html);
			} catch (e) {
				flb.getElements(selector)[0].innerHTML = html + flb.getElements(selector)[0].innerHTML;
			}
		},
		hideElements: function (selector) {
			var elements = flb.getElements(selector);
			for (var i = 0; i < elements.length; i++) {
				elements[i].style.display = "none";
			}
		},
		showElements: function (selector, specifiedDisplay) {
			var elements = flb.getElements(selector);
			for (var i = 0; i < elements.length; i++) {
				elements[i].style.display = specifiedDisplay || 'block';
			}
		},
		disableInput: function () {
			var element = flb.getElements('.flb-input-sec')[0];
			element.style.opacity = 0.1;
			element.style.pointerEvents = 'none';
		},
		enableInput: function () {
			var element = flb.getElements('.flb-input-sec')[0];
			element.style.opacity = 1;
			element.style.pointerEvents = 'all';
		},
		scrollBottom: function (elementId) {
			var element = flb.getElements(elementId)[0];
			element.scrollTop = element.scrollHeight - element.clientHeight;
		},
		isBotOpen: function () {
			if (flb.getElements("#flb-bot").length && flb.getElements("#flb-bot")[0].style.display == 'none') {
				return false;
			}
			return true;
		},
		openBotModal: function (url) {
			var iframe = flb.getElements("#flb-iframe")[0];
			iframe.src = url;
			flb.util.showElements("#flb-iframe-window");
		},
		parseDate: function (timestamp) {
			var timestampValue = parseInt(timestamp.toString().substr(0, 10));
			var d = new Date(timestampValue * 1000);

			function pad(n) { return n < 10 ? "0" + n : n; }
			var date = pad(d.getDate()) + "/" + pad(d.getMonth() + 1) + "/" + d.getFullYear();

			var today = new Date();
			var todayDate = pad(today.getDate()) + "/" + pad(today.getMonth() + 1) + "/" + today.getFullYear();

			today.setDate(today.getDate() - 1);
			var yesterDay = pad(today.getDate()) + "/" + pad(today.getMonth() + 1) + "/" + today.getFullYear();

			var time = d.toLocaleString('en-GB', { hour: 'numeric', minute: 'numeric', hour12: true });

			return (todayDate == date) ? '' + time : (date == yesterDay) ? 'yesterday ' + time : date + ' ' + time;
		},
		escapeHTML: function (text) {

			if (text) {
				text = text + " ".trim();
				return text.replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
			} else {
				return '';
			}
		},
		urlify: function (text) {
			
	
			var urlRegex = /(((https?:\/\/)|(www\.))[^\s]+)/g;
			//var urlRegex = /(https?:\/\/[^\s]+)/g;
			text = flb.util.escapeHTML(text);
		
			text = text.replace(/&lt;br&gt;/g, "<br>");
			text = text.replace(/&lt;b&gt;/g, "<b>");
			text = text.replace(/&lt;\/b&gt;/g, "</b>");


			var lines = text.split(/<br>/); // arabic
			text = "";
			for (var i = 0; i < lines.length; i++) {
				if (lines[i].trim() != '' && flb.util.isArabic(lines[i])) {
					text += "<div class='arabic-rtl'>" + lines[i] + "</div>";
				} else {
					if (text.trim() != '') {
						text += '<br>' + lines[i].trim();
					} else {
						text += lines[i].trim();
					}
				}
			}

			return text.replace(urlRegex, function (url, b, c) {
				var url2 = (c == 'www.') ? 'http://' + url : url;
				return '<a rel="noopener" href="' + url2 + '" target="_blank">' + url + '</a>';
			});
		},
		openURL: function (url, asNewWindow) {
			if (asNewWindow) {
				window.open(url, "_blank", "top=10,left=300,width=600,height=600");
			} else {
				flb.util.openBotModal(url);
			}
			flb.emit("interaction", {event: 'button-click',action: 'open-url',label:'url',url:url});
		},
		slide: function (wrapper, items, prev, next) {

			var slides = items.querySelectorAll('.flb-slide');
			var botWidth = flbDOM.querySelector("#flb-body").offsetWidth;
			for (var i = 0; i < slides.length; i++) {
				slides[i].style.width = botWidth + 'px';
			}

			var posX1 = 0,
				posX2 = 0,
				posInitial,
				posFinal,
				threshold = 100,
				slidesLength = slides.length,
				slideSize = items.querySelectorAll('.flb-slide')[0].offsetWidth,
				firstSlide = slides[0],
				lastSlide = slides[slidesLength - 1],
				cloneFirst = firstSlide.cloneNode(true),
				cloneLast = lastSlide.cloneNode(true),
				index = 0,
				allowShift = true;

			items.style.left = (botWidth * -1) + 'px';


			items.appendChild(cloneFirst);
			items.insertBefore(cloneLast, firstSlide);
			wrapper.classList.add('loaded');

			// Mouse events
			items.onmousedown = dragStart;

			// Touch events
			items.addEventListener('touchstart', dragStart);
			items.addEventListener('touchend', dragEnd);
			items.addEventListener('touchmove', dragAction);

			// Click events
			prev.addEventListener('click', function () { shiftSlide(-1) });
			next.addEventListener('click', function () { shiftSlide(1) });

			// Transition events
			items.addEventListener('transitionend', checkIndex);

			function dragStart(e) {
				e = e || window.event;
				e.preventDefault();
				posInitial = items.offsetLeft;

				if (e.type == 'touchstart') {
					posX1 = e.touches[0].clientX;
				} else {
					posX1 = e.clientX;
					document.onmouseup = dragEnd;
					document.onmousemove = dragAction;
				}
			}

			function dragAction(e) {
				e = e || window.event;

				if (e.type == 'touchmove') {
					posX2 = posX1 - e.touches[0].clientX;
					posX1 = e.touches[0].clientX;
				} else {
					posX2 = posX1 - e.clientX;
					posX1 = e.clientX;
				}
				items.style.left = (items.offsetLeft - posX2) + "px";
			}

			function dragEnd(e) {
				posFinal = items.offsetLeft;
				if (posFinal - posInitial < -threshold) {
					shiftSlide(1, 'drag');
				} else if (posFinal - posInitial > threshold) {
					shiftSlide(-1, 'drag');
				} else {
					items.style.left = (posInitial) + "px";
				}

				document.onmouseup = null;
				document.onmousemove = null;
			}

			function shiftSlide(dir, action) {
				items.classList.add('shifting');

				if (allowShift) {
					if (!action) { posInitial = items.offsetLeft; }

					if (dir == 1) {
						items.style.left = (posInitial - slideSize) + "px";
						index++;
					} else if (dir == -1) {
						items.style.left = (posInitial + slideSize) + "px";
						index--;
					}
				};

				allowShift = false;
			}

			function checkIndex() {
				items.classList.remove('shifting');

				if (index == -1) {
					items.style.left = -(slidesLength * slideSize) + "px";
					index = slidesLength - 1;
				}

				if (index == slidesLength) {
					items.style.left = -(1 * slideSize) + "px";
					index = 0;
				}

				allowShift = true;
			}
		},
		getScript: function (source, callback) {
			var script = document.createElement('script');
			var prior = document.getElementsByTagName('script')[0];
			script.async = 1;

			script.onload = script.onreadystatechange = function (_, isAbort) {
				if (isAbort || !script.readyState || /loaded|complete/.test(script.readyState)) {
					script.onload = script.onreadystatechange = null;
					script = undefined;

					if (!isAbort && callback) setTimeout(callback, 0);
				}
			};

			script.src = source;
			prior.parentNode.insertBefore(script, prior);
		},
		isArabic: function (str) {
			var arregex = /[\u0600-\u06FF]/;
			return arregex.test(str);
		},
		filterQuickReply: function (e, optId) {
			var options = flbDOM.querySelectorAll('#' + optId + ' li');

			for (var i = 0; i < options.length; i++) {
				var optVal = options[i].textContent || options[i].innerText;
				optVal = optVal.toLowerCase();
				if (!e.value || e.value == '' || optVal.indexOf(e.value.toLowerCase()) !== -1) {
					options[i].style.display = 'block';
				} else {
					options[i].style.display = 'none';
				}
			}

		},
	},
	sessFeedback: function(feedback){

		var commentUI = '<input type="text" maxlength="200" placeholder="Type your comments here" id="sess-feedback-input" >';
      	commentUI+='<span id="flb-feedback-btns"><b class="feedback-btns" onclick="flb.sendSessFeedback('+feedback+',0)">Send </b> <b class="feedback-btns" onclick="flb.sendSessFeedback('+feedback+',1)"> Skip</b></span>';
      	flb.getElements("#flb-sess-feedback")[0].innerHTML = commentUI;
      	flb.getElements("#sess-feedback-input")[0].focus();
		  flb.getElements("#sess-feedback-input")[0].addEventListener("keyup", function(e){
      		if(e.keyCode==13){
      			flb.sendSessFeedback(feedback,1);
      		}
      	});
	},
	sendSessFeedback: function(feedback,canSkip){
		var comment="";
		if(!canSkip){
			comment = flb.getElements("#sess-feedback-input")[0].value;
		}
		
		if(canSkip || comment.trim().length>3){
			flb.sockemit("botFeedback", {comment: comment,feedback:feedback,session_id:flb.currentSession});
			flb.getElements("#flb-sess-feedback")[0].innerHTML = "<b>Thanks for your feedback</b>";
		}
	},

};

window.decodeEntities = (function () {

	// var element = document.createElement('div');

	function decodeHTMLEntities(str) {
		if (str && typeof str === 'string') {
			// strip script/html tags
			
			str = str.replace(/&lt;/g, "<");
			str = str.replace(/&gt;/g, ">");
			str = str.replace(/<script[^>]*>([\S\s]*?)<\/script>/gmi, '');
			
			// str = str.replace(/<\/?\w(?:[^"'>]|"[^"]*"|'[^']*')*>/gmi, '');
			// element.innerHTML = str;
			// str = element.textContent;
			// element.textContent = '';

			//str = flb.util.escapeHTML(str);
		
		}

		return str;
	}

	return decodeHTMLEntities;
})();

try{

	var powerByBtn = flb.getElements('#power-by-btn')[0];
	if(powerByBtn){
		powerByBtn.href = "https://floatbot.ai?utm_medium=referral&utm_source="+window.location.host+"&utm_content=powered-by-widget";
	}

	if (localStorage[flb.botId + 'flbai_bot_with_user_id'] == "0" || localStorage[flb.botId + 'flbai_bot_user_id'] == 0 || localStorage[flb.botId + 'flbai_token'] == '' || localStorage[flb.botId + 'flbai_bot_user_id'] == '0' || localStorage[flb.botId + 'flbai_token'] == 0 || localStorage[flb.botId + 'flbai_token'] == '0') {
		localStorage.removeItem(flb.botId + 'flbai_token');
		localStorage.removeItem(flb.botId + 'flbai_bot_with_user_id');
		localStorage.removeItem(flb.botId + 'flbai_bot_user_id');

	}

}catch(err) {}flb.reconnectCount = 0;
flb.connectSocket = function () {
	var self = this;
	if ((flb.socket && flb.socket.readyState == WebSocket.OPEN) || !this.botId || typeof localStorage[this.botId + 'flbai_bot_user_id'] == 'undefined' || typeof localStorage[this.botId + 'flbai_token'] == 'undefined') {
		return false;
	}

	var websocket_url = 'wss://floatbot.ai/' + 'service?bot_id=' + this.botId + '&flb_uid=' + localStorage[this.botId + 'flbai_bot_user_id'] + '&token=' + localStorage[this.botId + 'flbai_token'];
	if (flb.socket) {
		flb.socket.close();
	}

	if(flb.config.deviceType && typeof flb.config.deviceType != 'undefined'){
		websocket_url += '&device_type='+ flb.config.deviceType;
	}
	
	flb.socket = new WebSocket(websocket_url);

	flb.socket.onopen = function () {

		flb.connected = true;
		if (flb.reconnect) {
			clearInterval(flb.reconnect);
		}
		//clearInterval(checkHeartbeatInterval);
		flb.reconnectCount = 0;
		//checkHeartbeatInterval = setInterval(checkHeartbeat, 60 * 1000);

		flb.sockemit('auth', {
			bot_id: flb.botId,
			flb_uid: localStorage[flb.botId + 'flbai_bot_user_id'],
			token: localStorage[flb.botId + 'flbai_token'],
			date: new Date().toISOString()
		});

		flb.util.hideElements("#flb-reconnect-holder");

	};

	flb.socket.onmessage = function (event) {

		if (event.data instanceof Blob) {
			var reader = new FileReader();
			reader.onload = function (event) {
				event.data = reader.result;
				if (event.data[0] == "{") {
					var data;
					try {
						data = JSON.parse(event.data);
						//console.log(data);
					} catch (error) {
						return false;
					}
					if (data.sockType) {
						self.emit(data.sockType, data);
					}
				} else if (event.data[0] == '*') {
					self.socket.send('*');
				}
			};
			reader.readAsText(event.data);
		} else {
			if (event.data[0] == "{") {
				var data;
				try {
					data = JSON.parse(event.data);

				} catch (error) {
					return false;
				}
				if (data.sockType) {
					self.emit(data.sockType, data);
				}
			} else if (event.data[0] == '*') {
				self.socket.send('*');
			}
		}
	};

	flb.socket.onclose = function () {
		flb.connected = false;
		flb.reconnectCount++;

		if (flb.reconnectCount > 5) {
			flb.tryReconnect(8000, 15000);
		} else if (flb.reconnectCount > 10) {
			flb.tryReconnect(10000, 20000);
		} else {
			flb.tryReconnect(5000, 8000);
		}
	};

};

flb.tryReconnect = function (minTry, maxTry) {

	if (flb.botId && typeof localStorage[flb.botId + 'flbai_bot_user_id'] != 'undefined' && typeof localStorage[flb.botId + 'flbai_token'] != 'undefined') {
		flb.connected = false;
		if (flb.socket && flb.socket.readyState == 1) {
			flb.socket.close();
		}

		flb.util.showElements("#flb-reconnect-holder");
		clearInterval(flb.reconnect);
		if (flb.socket && flb.socket.readyState == 3) {

			flb.reconnect = setInterval(function () {
				//console.log('-reconnect-');

				if (!flb.socket || flb.socket.readyState == 3) {
					flb.connectSocket();
				} else if (flb.socket.readyState == 1) {
					clearInterval(flb.reconnect);
				}

			}, Math.floor((Math.random() * (maxTry - minTry)) + minTry));
		}
	}
};

flb.netStatus = function () {
	if (navigator.onLine) {

	} else {
		flb.tryReconnect(5000, 8000);
	}
}

if (window.addEventListener) {
	window.addEventListener('offline', flb.netStatus);
	window.addEventListener('online', flb.netStatus);
} else {
	document.body.attachEvent('onoffline', flb.netStatus);
	document.body.attachEvent('ononline', flb.netStatus);
}flb.on("getConversations", function (data) {
  //$$("#flbLoader").hide();

  if (flb.firstload == false) {
    flb.firstload = true;
    if (data.conversations && data.conversations.length > 0) {
      //conv_chathistory(json_hobj.conversations[0].sid);
      flb.latestSession = data.conversations[0].sid;
      flb.viewChat(flb.latestSession);
      return false;
    }
  } else if (
    flb.activeScreen == "conversations" &&
    data.conversations &&
    data.conversations.length > 0
  ) {
    flb.getElements("#flb-body")[0].innerHTML = "";
    flb.latestSession = flb.currentSession = data.conversations[0].sid;
    for (var i = 0; i < data.conversations.length; i++) {
      if (
        data.conversations[i].message &&
        data.conversations[i].message.message
      ) {
        var conv_date = flb.util.parseDate(data.conversations[i].message.ts);

        var html = "";

        html +=
          "<div onclick=\"flb.viewChat('" +
          data.conversations[i].sid +
          '\')" class="flb-conversation-summary">';
        if (flb.latestSession == data.conversations[i].sid) {
          html +=
            '<div class="flb-conversation-summary-body flb-conversation-active">';
        } else {
          html += '<div class="flb-conversation-summary-body">';
        }
        html +=
          '<div class="flb-conversation-summary-icon" style="background-color:' +
          flb.config.themeColor +
          '"></div>';
        html += '<div class="flb-conversation-summary-meta">';
        html +=
          '<div class="flb-conversation-summary-body-author"><b> Session ' +
          (data.conversations.length - i) +
          "</b></div>";
        html +=
          '<div class="flb-conversation-summary-timestamp">' +
          conv_date +
          "</div></div><br>";

        html += '<div class="flb-conversation-summary-content">';
        html += '<div class="flb-conversation-summary-content-container">';
        html += '<div class="flb-conversation-summary-content-text">';

        var type =
          data.conversations[i].message.message.type ||
          data.conversations[i].message.message.item_type;

        if (
          data.conversations[i].message.message.items &&
          (data.conversations[i].message.sender_type == "bot" ||
            data.conversations[i].message.sender_type == "agent" ||
            data.conversations[i].message.sender_type == "broadcast")
        ) {
          if (
            data.conversations[i].message.message.items.type == "text" ||
            data.conversations[i].message.message.items.type == "info"
          ) {
            html += flb.util.escapeHTML(
              data.conversations[i].message.message.items.data.text
            );
          }
          if (data.conversations[i].message.message.items.type == "login") {
            html += flb.util.escapeHTML(
              data.conversations[i].message.message.items.data.text
            );
          }
          if (
            data.conversations[i].message.message.items.type === "user_input"
          ) {
            html += flb.util.escapeHTML(
              data.conversations[i].message.message.items.data.title
            );
          }

          if (
            data.conversations[i].message.message.items.type === "quick_reply"
          ) {
            html += flb.util.escapeHTML(
              data.conversations[i].message.message.items.data.text
            );
          }

          if (data.conversations[i].message.message.items.type === "confirm") {
            html += flb.util.escapeHTML(
              data.conversations[i].message.message.items.data.text
            );
          }

          if (data.conversations[i].message.message.items.type === "image") {
            html += "Image";
          }
          if (data.conversations[i].message.message.items.type === "cards") {
            html += "Cards";
          }
          if (data.conversations[i].message.message.items.type === "location") {
            html += "Location";
          }
        }
        if (data.conversations[i].message.sender_type == "user") {
          if (type && type == "location") {
            html += "Location";
          } else {
            html += data.conversations[i].message.message.text
              ? flb.util.escapeHTML(data.conversations[i].message.message.text)
              : data.conversations[i].message.message.filename;
          }
        }
        html += "</div></div>";
        html +=
          '<span class="flb-conversation-summary-user-icon"></span></div></div></div>';
        flb.util.appendHtml("#flb-body", html);
      }
    }
  }
});

flb.on("chatState", function (data) {
  if (flb.config.quick_reply_hide_input) {
    flb.util.hideElements("#flb-input");
    flb.util.hideElements("#flb-send-msg-btn");
  }
  flb.chatTarget = "bot";

  flbDOM.getElementById('open-session-list-btn').style.display='inline-block';
  if (parseInt(data.type) == 2 || parseInt(data.type) == -1) {
    flb.chatTarget = "agent"; //floatbot agent
    flb.util.showElements("#flb-input");
    flb.util.showElements("#flb-send-msg-btn");
    flb.util.hideElements("#open-session-list-btn");
  }else if(parseInt(data.type) && parseInt(data.type) > 1){
    flb.chatTarget = "other agent";
    flb.emit("initOtherChat", data);
    flb.util.showElements("#flb-input");
    flb.util.showElements("#flb-send-msg-btn");
    flb.util.hideElements("#open-session-list-btn");
  }

});

flb.on("chatHistory", function (data) {
  flb.isLoadingHistory = false;
  flb.util.hideElements("#flb-spinner");

  if ("messages" in data && data.messages.length > 0) {
    //$$("#flb_message_window").scrollTop($$("#flb_message_window")[0].scrollHeight);
    data.messages = data.messages.sort((a,b) => b.ts - a.ts); 
    if (flb.lastMessagets) {
      
      for (var i = 0; i < data.messages.length; i++) {
        //if(typeof flb.msgHash[data.messages[i].ts] == 'undefined'){
        //flb.msgHash[data.messages[i].ts] = 0;
        data.messages[i]["from"] = "chatHistory";
        flb.parseMessage(data.messages[i], 0);
        //parse_history(data.messages[i],1);
        //}
      }
    } else if (!flb.lastMessagets) {
      if (data.messages[0].sid == flb.latestSession) {
        flb.sockemit("ready", {});
      }
      for (var i = data.messages.length - 1; i >= 0; i--) {
        //if(typeof flb.msgHash[data.messages[i].ts] == 'undefined'){
        data.messages[i]["from"] = "chatHistory";
        flb.parseMessage(data.messages[i], 1);
        //flb.msgHash[data.messages[i].ts] = 0;
        //parse_history(data.messages[i],0);
        //}
      }
    }
    flb.lastMessagets = data.messages[data.messages.length - 1].ts;
  } else {
    if (data.messages.length == 0 && flb.lastMessagets == 0) {
      flb.sockemit("start", { sid: flb.latestSession });
      setTimeout(function () {
        flb.sockemit("ready", {});
      }, 500);
    }
  }
});

flb.on("comm", function (data) {
  
  if ("flow_data" in data) {
    var item = {
      message: data.flow_data,
      ts: data.time,
      target: data.target,
      sender: data.sender,
      sender_type: data.sender_type,
      sid: data.sid,
      type: data.type,
      sts: data.ts || 0,
      sockType: data.sockType,
      from: "comm",
      ai:data.ai?1:0,
      reply_to: typeof data.reply_to != 'undefined'?data.reply_to:0
    };

    flb.lastItem = item;
    flb.typing.hide();
    flb.isComm = true;
    flb.parseMessage(item, 1);
    setTimeout(() => {
      flb.isComm = false;
    }, 500);

  }
});

flb.on("newSessionResponse", function (data) {
  if ("sid" in data) {
    flb.latestSession = flb.currentSession = data.sid;
    flb.msgHash[flb.currentSession] = {};
    flb.sockemit("start", { sid: flb.latestSession });
    flb.firstload=true;
  }
});

flb.on("error", function (message) {
  flb.showSnackbar(message, "#e1454c");
});

flb.on("success", function (message) {
  flb.showSnackbar(message, "#00b27f");
});

flb.getElements("#flb-input")[0].addEventListener("keydown", function (event) {
  if (event.key === "Enter") {
    event.preventDefault();
    flb.emit("updateTypingState", { target: flb.botId, state: "empty" });
    flb.sendTextMessage();
  } else {
    var input = flb.getElements("#flb-input")[0];
    var inputText = input.value.trim();
    if (inputText.length > 0) {
      flb.emit("updateTypingState", { target: flb.botId, state: "typing" });
    } else {
      flb.emit("updateTypingState", { target: flb.botId, state: "typed" });
    }
  }
});

flb.getElements("#flb-input")[0].addEventListener("input", function (event) {
  var input = flb.getElements("#flb-input")[0];

  if (input.value != "") {
    if (flb.util.isArabic(input.value)) {
      input.style.direction = "rtl";
    } else {
      input.style.direction = "ltr";
    }
  } else {
    input.style.direction = "unset";
  }
});

flb.getElements("#flb-input")[0].addEventListener("focus", function (event) {
  setTimeout(function () {
    flb.util.scrollBottom("#flb-body");
  }, 200);
});

flb.userTyping = {};
flb.on("updateTypingState", function (data) {
  if (data.state == "typing") {
    if (!flb.userTyping.typingState || flb.userTyping.typingState != "typing") {
      flb.userTyping.typingState = "typing";
      flb.sockemit("typingState", { target: data.target, state: 1 });
      if (flb.userTyping.stoppedTypingTimeout) {
        clearTimeout(flb.userTyping.stoppedTypingTimeout);
      }
      flb.emit("typing", { status: true });
    } else {
      clearTimeout(flb.userTyping.stoppedTypingTimeout);
      flb.userTyping.stoppedTypingTimeout = setTimeout(function () {
        flb.userTyping.typingState = "typed";
        flb.sockemit("typingState", { target: data.target, state: 2 });
        flb.emit("typing", { status: false });
      }, 3000);
    }
  } else if (data.state == "empty") {
    clearTimeout(flb.userTyping.stoppedTypingTimeout);
    if (!flb.userTyping.typingState || flb.userTyping.typingState != "empty") {
      flb.userTyping.typingState = "empty";
      flb.sockemit("typingState", { target: data.target, state: 2 });
      flb.emit("typing", { status: false });
    }
  }
});

flb.on("typingState", function (data) {
  if (data.state === 1) {
    flb.typing.show();
  } else {
    flb.typing.hide();
  }
});

flb.on("tAck", function (data) {
  // user message server ts
  flb.msgHash[flb.currentSession][data.sts] = 1;
});

flb.on("fileAck", function (data) {
  var form = new FormData();
  form.append("file_id", data.files[0].fid);
  form.append("chatbot_id", flb.botId);
  // form.append("flow_id", data.files[0].flow_id);
  // form.append("user_id", localStorage[flb.botId + "flbai_bot_user_id"]);
  // form.append("item_index", data.files[0].item_index);
  form.append("file", flb.file);

  var xhr = new XMLHttpRequest();
  xhr.open("POST", "https://floatbot.ai/api/v1/user/"+flb.currentSession+"/attachment", true);
  //xhr.setRequestHeader('Content-Type','multipart/form-data;');
  xhr.upload.addEventListener("progress", function (e) {
    var percent_complete = (e.loaded / e.total) * 100;
    var progressBar = flb.getElements("#flb-file-upload-progress");
    if (progressBar && progressBar.length) {
      progressBar = progressBar[0];
      progressBar.value = percent_complete;
    }
  });
  xhr.addEventListener("load", function (e) {
    //console.log("S:",xhr.status);
    var result = JSON.parse(xhr.response);
    if (result.file_path) {
      var ts = new Date().getTime();
      flb.util.hideElements("#flb-bar-holder");
      //var ui = flb.attachment.html({fileName:flb.file.name,type:'',ts:ts,full_path:result.data.file_path});
      var boj = {
        sender_type: "user",
        ts: new Date().getTime(),
        sid: flb.latestSession,
        message: {
          filename: flb.file.name,
          full_path: result.file_path,
          fid: data.files[0].fid +'.'+ flb.file.name.split('.').pop().toLowerCase(),
          type: "file",
        },
      };
      flb.parseMessage(boj, 1);
      flb.sockemit("uploadSuccess", {
        sid: flb.latestSession,
        fid: data.files[0].fid,
      });
      flb.emit("success", "Your attachment is uploaded successfully");
    } else {
      flb.emit("error", "failed to upload file. try again");
      flb.attachment.showUploader();
    }
  });

  xhr.send(form);
});

if (window.addEventListener) {
  window.addEventListener("message", onIframeMessage, false);
} else if (window.attachEvent) {
  window.attachEvent("onmessage", onIframeMessage, false);
}

function onIframeMessage(event) {
  var data = event.data;
  if (data.msg && data.msg == "closeIframe") {
    flb.util.hideElements("#flb-iframe-window");
  }
}

window.onload = function () {
  flb.getElements("#flb-title")[0].innerHTML = flb.config.title;
};

/* welcome image */
//newConversation
flb.on("syncMessages", function (data) {
  if (flb.config && flb.config.other && flb.config.other.welcomeImage) {
    var msgWindow = flb.getElements("#flb-body")[0];
    msgWindow.innerHTML =
      "<img class='welcome-img' src='" +
      flb.config.other.welcomeImage +
      "'></img>" +
      msgWindow.innerHTML;
  }
});

if (typeof dataLayer == "undefined") {
  dataLayer = [];
}
flb.on("interaction", function (event) {
  dataLayer.push(event);
});

flb.on('sentiment',function(data){
	
	flb.sockemit("userVote", {ts: data.ts, vote: parseInt(data.button)});
	setTimeout(function(){
		flb.util.hideElements('#snt_'+data.ts);
	},300);
});

/* Connection termination reason */

// flb.sockemit('browserClosed', {
//   sockType: "browserClosed",
//   sid: flb.currentSession,
// });

// flb.sockemit('pageRefreshed', {
//   sockType: "pageRefreshed",
//   sid: flb.currentSession,
// });


window.addEventListener('beforeunload', function(event) {

    flb.sockemit('browserClosed', {
      sockType: "browserClosed",
      sid: flb.currentSession,
    });
      
});



!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).marked={})}(this,function(t){"use strict";function e(){return{async:!1,baseUrl:null,breaks:!1,extensions:null,gfm:!0,headerIds:!1,headerPrefix:"",highlight:null,hooks:null,langPrefix:"language-",mangle:!1,pedantic:!1,renderer:null,sanitize:!1,sanitizer:null,silent:!1,smartypants:!1,tokenizer:null,walkTokens:null,xhtml:!1}}function n(e){t.defaults=e}t.defaults=e();const s=/[&<>"']/,r=new RegExp(s.source,"g"),i=/[<>"']|&(?!(#\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\w+);)/,l=new RegExp(i.source,"g"),a={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"},o=e=>a[e];function h(e,t){if(t){if(s.test(e))return e.replace(r,o)}else if(i.test(e))return e.replace(l,o);return e}const c=/&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/gi;function m(e){return e.replace(c,(e,t)=>"colon"===(t=t.toLowerCase())?":":"#"===t.charAt(0)?"x"===t.charAt(1)?String.fromCharCode(parseInt(t.substring(2),16)):String.fromCharCode(+t.substring(1)):"")}const p=/(^|[^\[])\^/g;function u(n,e){n="string"==typeof n?n:n.source,e=e||"";const s={replace:(e,t)=>(t=(t="object"==typeof t&&"source"in t?t.source:t).replace(p,"$1"),n=n.replace(e,t),s),getRegex:()=>new RegExp(n,e)};return s}const g=/[^\w:]/g,d=/^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;function k(e,t,n){if(e){let e;try{e=decodeURIComponent(m(n)).replace(g,"").toLowerCase()}catch(e){return null}if(0===e.indexOf("javascript:")||0===e.indexOf("vbscript:")||0===e.indexOf("data:"))return null}var s;t&&!d.test(n)&&(e=t,t=n,f[" "+e]||(x.test(e)?f[" "+e]=e+"/":f[" "+e]=y(e,"/",!0)),s=-1===(e=f[" "+e]).indexOf(":"),n="//"===t.substring(0,2)?s?t:e.replace(j,"$1")+t:"/"===t.charAt(0)?s?t:e.replace(D,"$1")+t:e+t);try{n=encodeURI(n).replace(/%25/g,"%")}catch(e){return null}return n}const f={},x=/^[^:]+:\/*[^/]*$/,j=/^([^:]+:)[\s\S]*$/,D=/^([^:]+:\/*[^/]*)[\s\S]*$/;var b={exec:()=>null};function w(e,t){var n=e.replace(/\|/g,(e,t,n)=>{let s=!1,r=t;for(;0<=--r&&"\\"===n[r];)s=!s;return s?"|":" |"}).split(/ \|/);let s=0;if(n[0].trim()||n.shift(),0<n.length&&!n[n.length-1].trim()&&n.pop(),t)if(n.length>t)n.splice(t);else for(;n.length<t;)n.push("");for(;s<n.length;s++)n[s]=n[s].trim().replace(/\\\|/g,"|");return n}function y(e,t,n){var s=e.length;if(0===s)return"";let r=0;for(;r<s;){var i=e.charAt(s-r-1);if((i!==t||n)&&(i===t||!n))break;r++}return e.slice(0,s-r)}function _(e,t,n,s){var r=t.href,t=t.title?h(t.title):null,i=e[1].replace(/\\([\[\]])/g,"$1");return"!"!==e[0].charAt(0)?(s.state.inLink=!0,e={type:"link",raw:n,href:r,title:t,text:i,tokens:s.inlineTokens(i)},s.state.inLink=!1,e):{type:"image",raw:n,href:r,title:t,text:h(i)}}class ${options;rules;lexer;constructor(e){this.options=e||t.defaults}space(e){e=this.rules.block.newline.exec(e);if(e&&0<e[0].length)return{type:"space",raw:e[0]}}code(e){var t,e=this.rules.block.code.exec(e);if(e)return t=e[0].replace(/^ {1,4}/gm,""),{type:"code",raw:e[0],codeBlockStyle:"indented",text:this.options.pedantic?t:y(t,"\n")}}fences(e){var t,n,e=this.rules.block.fences.exec(e);if(e)return n=function(e,t){if(null===(e=e.match(/^(\s+)(?:```)/)))return t;const n=e[1];return t.split("\n").map(e=>{var t=e.match(/^\s+/);return null!==t&&([t]=t,t.length>=n.length)?e.slice(n.length):e}).join("\n")}(t=e[0],e[3]||""),{type:"code",raw:t,lang:e[2]&&e[2].trim().replace(this.rules.inline._escapes,"$1"),text:n}}heading(t){var n,t=this.rules.block.heading.exec(t);if(t){let e=t[2].trim();return/#$/.test(e)&&(n=y(e,"#"),!this.options.pedantic&&n&&!/ $/.test(n)||(e=n.trim())),{type:"heading",raw:t[0],depth:t[1].length,text:e,tokens:this.lexer.inline(e)}}}hr(e){e=this.rules.block.hr.exec(e);if(e)return{type:"hr",raw:e[0]}}blockquote(e){var t,n,s,e=this.rules.block.blockquote.exec(e);if(e)return t=e[0].replace(/^ *>[ \t]?/gm,""),n=this.lexer.state.top,this.lexer.state.top=!0,s=this.lexer.blockTokens(t),this.lexer.state.top=n,{type:"blockquote",raw:e[0],tokens:s,text:t}}list(c){let p=this.rules.block.list.exec(c);if(p){let e=p[1].trim();var t,n=1<e.length,u={type:"list",raw:"",ordered:n,start:n?+e.slice(0,-1):"",loose:!1,items:[]},g=(e=n?"\\d{1,9}\\"+e.slice(-1):"\\"+e,this.options.pedantic&&(e=n?e:"[*+-]"),new RegExp(`^( {0,3}${e})((?:[	 ][^\\n]*)?(?:\\n|$))`));let a="",o="",h=!1;for(;c;){let e=!1;if(!(p=g.exec(c)))break;if(this.rules.block.hr.test(c))break;a=p[0],c=c.substring(a.length);let t=p[2].split("\n",1)[0].replace(/^\t+/,e=>" ".repeat(3*e.length)),n=c.split("\n",1)[0],s=0,r=(this.options.pedantic?(s=2,o=t.trimLeft()):(s=4<(s=p[2].search(/[^ ]/))?1:s,o=t.slice(s),s+=p[1].length),!1);if(!t&&/^ *$/.test(n)&&(a+=n+"\n",c=c.substring(n.length+1),e=!0),!e)for(var d=new RegExp(`^ {0,${Math.min(3,s-1)}}(?:[*+-]|\\d{1,9}[.)])((?:[ 	][^\\n]*)?(?:\\n|$))`),k=new RegExp(`^ {0,${Math.min(3,s-1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$)`),f=new RegExp(`^ {0,${Math.min(3,s-1)}}(?:\`\`\`|~~~)`),x=new RegExp(`^ {0,${Math.min(3,s-1)}}#`);c;){var m=c.split("\n",1)[0];if(n=m,this.options.pedantic&&(n=n.replace(/^ {1,4}(?=( {4})*[^ ])/g,"  ")),f.test(n))break;if(x.test(n))break;if(d.test(n))break;if(k.test(c))break;if(n.search(/[^ ]/)>=s||!n.trim())o+="\n"+n.slice(s);else{if(r)break;if(4<=t.search(/[^ ]/))break;if(f.test(t))break;if(x.test(t))break;if(k.test(t))break;o+="\n"+n}r||n.trim()||(r=!0),a+=m+"\n",c=c.substring(m.length+1),t=n.slice(s)}u.loose||(h?u.loose=!0:/\n *\n *$/.test(a)&&(h=!0));let i=null,l;this.options.gfm&&(i=/^\[[ xX]\] /.exec(o))&&(l="[ ] "!==i[0],o=o.replace(/^\[[ xX]\] +/,"")),u.items.push({type:"list_item",raw:a,task:!!i,checked:l,loose:!1,text:o,tokens:[]}),u.raw+=a}u.items[u.items.length-1].raw=a.trimRight(),u.items[u.items.length-1].text=o.trimRight(),u.raw=u.raw.trimRight();for(let e=0;e<u.items.length;e++)this.lexer.state.top=!1,u.items[e].tokens=this.lexer.blockTokens(u.items[e].text,[]),u.loose||(t=0<(t=u.items[e].tokens.filter(e=>"space"===e.type)).length&&t.some(e=>/\n.*\n/.test(e.raw)),u.loose=t);if(u.loose)for(let e=0;e<u.items.length;e++)u.items[e].loose=!0;return u}}html(e){var t,n,e=this.rules.block.html.exec(e);if(e)return t={type:"html",block:!0,raw:e[0],pre:!this.options.sanitizer&&("pre"===e[1]||"script"===e[1]||"style"===e[1]),text:e[0]},this.options.sanitize&&(e=this.options.sanitizer?this.options.sanitizer(e[0]):h(e[0]),(n=t).type="paragraph",n.text=e,n.tokens=this.lexer.inline(e)),t}def(e){var t,n,s,e=this.rules.block.def.exec(e);if(e)return t=e[1].toLowerCase().replace(/\s+/g," "),n=e[2]?e[2].replace(/^<(.*)>$/,"$1").replace(this.rules.inline._escapes,"$1"):"",s=e[3]&&e[3].substring(1,e[3].length-1).replace(this.rules.inline._escapes,"$1"),{type:"def",tag:t,raw:e[0],href:n,title:s}}table(e){e=this.rules.block.table.exec(e);if(e){var i={type:"table",raw:e[0],header:w(e[1]).map(e=>({text:e,tokens:[]})),align:e[2].replace(/^ *|\| *$/g,"").split(/ *\| */),rows:e[3]&&e[3].trim()?e[3].replace(/\n[ \t]*$/,"").split("\n"):[]};if(i.header.length===i.align.length){let e=i.align.length,t,n,s,r;for(t=0;t<e;t++){var l=i.align[t];l&&(/^ *-+: *$/.test(l)?i.align[t]="right":/^ *:-+: *$/.test(l)?i.align[t]="center":/^ *:-+ *$/.test(l)?i.align[t]="left":i.align[t]=null)}for(e=i.rows.length,t=0;t<e;t++)i.rows[t]=w(i.rows[t],i.header.length).map(e=>({text:e,tokens:[]}));for(e=i.header.length,n=0;n<e;n++)i.header[n].tokens=this.lexer.inline(i.header[n].text);for(e=i.rows.length,n=0;n<e;n++)for(r=i.rows[n],s=0;s<r.length;s++)r[s].tokens=this.lexer.inline(r[s].text);return i}}}lheading(e){e=this.rules.block.lheading.exec(e);if(e)return{type:"heading",raw:e[0],depth:"="===e[2].charAt(0)?1:2,text:e[1],tokens:this.lexer.inline(e[1])}}paragraph(e){var t,e=this.rules.block.paragraph.exec(e);if(e)return t="\n"===e[1].charAt(e[1].length-1)?e[1].slice(0,-1):e[1],{type:"paragraph",raw:e[0],text:t,tokens:this.lexer.inline(t)}}text(e){e=this.rules.block.text.exec(e);if(e)return{type:"text",raw:e[0],text:e[0],tokens:this.lexer.inline(e[0])}}escape(e){e=this.rules.inline.escape.exec(e);if(e)return{type:"escape",raw:e[0],text:h(e[1])}}tag(e){e=this.rules.inline.tag.exec(e);if(e)return!this.lexer.state.inLink&&/^<a /i.test(e[0])?this.lexer.state.inLink=!0:this.lexer.state.inLink&&/^<\/a>/i.test(e[0])&&(this.lexer.state.inLink=!1),!this.lexer.state.inRawBlock&&/^<(pre|code|kbd|script)(\s|>)/i.test(e[0])?this.lexer.state.inRawBlock=!0:this.lexer.state.inRawBlock&&/^<\/(pre|code|kbd|script)(\s|>)/i.test(e[0])&&(this.lexer.state.inRawBlock=!1),{type:this.options.sanitize?"text":"html",raw:e[0],inLink:this.lexer.state.inLink,inRawBlock:this.lexer.state.inRawBlock,block:!1,text:this.options.sanitize?this.options.sanitizer?this.options.sanitizer(e[0]):h(e[0]):e[0]}}link(n){n=this.rules.inline.link.exec(n);if(n){var s=n[2].trim();if(!this.options.pedantic&&/^</.test(s)){if(!/>$/.test(s))return;var r=y(s.slice(0,-1),"\\");if((s.length-r.length)%2==0)return}else{var i,r=function(n,s){if(-1!==n.indexOf(s[1])){let t=0;for(let e=0;e<n.length;e++)if("\\"===n[e])e++;else if(n[e]===s[0])t++;else if(n[e]===s[1]&&--t<0)return e}return-1}(n[2],"()");-1<r&&(i=(0===n[0].indexOf("!")?5:4)+n[1].length+r,n[2]=n[2].substring(0,r),n[0]=n[0].substring(0,i).trim(),n[3]="")}let e=n[2],t="";return this.options.pedantic?(r=/^([^'"]*[^\s])\s+(['"])(.*)\2/.exec(e))&&(e=r[1],t=r[3]):t=n[3]?n[3].slice(1,-1):"",e=e.trim(),_(n,{href:(e=/^</.test(e)?this.options.pedantic&&!/>$/.test(s)?e.slice(1):e.slice(1,-1):e)&&e.replace(this.rules.inline._escapes,"$1"),title:t&&t.replace(this.rules.inline._escapes,"$1")},n[0],this.lexer)}}reflink(t,n){let s;if(s=(s=this.rules.inline.reflink.exec(t))||this.rules.inline.nolink.exec(t)){let e=(s[2]||s[1]).replace(/\s+/g," ");return(e=n[e.toLowerCase()])?_(s,e,s[0],this.lexer):{type:"text",raw:t=s[0].charAt(0),text:t}}}emStrong(r,i,e=""){let l=this.rules.inline.emStrong.lDelim.exec(r);if(l&&((!l[3]||!e.match(/[\p{L}\p{N}]/u))&&(!(l[1]||l[2]||"")||!e||this.rules.inline.punctuation.exec(e)))){var a=[...l[0]].length-1;let e,t,n=a,s=0;var o,h,c="*"===l[0][0]?this.rules.inline.emStrong.rDelimAst:this.rules.inline.emStrong.rDelimUnd;for(c.lastIndex=0,i=i.slice(-1*r.length+a);null!=(l=c.exec(i));)if(e=l[1]||l[2]||l[3]||l[4]||l[5]||l[6])if(t=[...e].length,l[3]||l[4])n+=t;else if((l[5]||l[6])&&a%3&&!((a+t)%3))s+=t;else if(!(0<(n-=t)))return t=Math.min(t,t+n+s),o=[...r].slice(0,a+l.index+t+1).join(""),Math.min(a,t)%2?(h=o.slice(1,-1),{type:"em",raw:o,text:h,tokens:this.lexer.inlineTokens(h)}):(h=o.slice(2,-2),{type:"strong",raw:o,text:h,tokens:this.lexer.inlineTokens(h)})}}codespan(t){t=this.rules.inline.code.exec(t);if(t){let e=t[2].replace(/\n/g," ");var n=/[^ ]/.test(e),s=/^ /.test(e)&&/ $/.test(e);return e=h(e=n&&s?e.substring(1,e.length-1):e,!0),{type:"codespan",raw:t[0],text:e}}}br(e){e=this.rules.inline.br.exec(e);if(e)return{type:"br",raw:e[0]}}del(e){e=this.rules.inline.del.exec(e);if(e)return{type:"del",raw:e[0],text:e[2],tokens:this.lexer.inlineTokens(e[2])}}autolink(n,s){n=this.rules.inline.autolink.exec(n);if(n){let e,t;return t="@"===n[2]?"mailto:"+(e=h(this.options.mangle?s(n[1]):n[1])):e=h(n[1]),{type:"link",raw:n[0],text:e,href:t,tokens:[{type:"text",raw:e,text:e}]}}}url(e,n){var s,r;if(s=this.rules.inline.url.exec(e)){let e,t;if("@"===s[2])e=h(this.options.mangle?n(s[0]):s[0]),t="mailto:"+e;else{for(;r=s[0],s[0]=this.rules.inline._backpedal.exec(s[0])[0],r!==s[0];);e=h(s[0]),t="www."===s[1]?"http://"+s[0]:s[0]}return{type:"link",raw:s[0],text:e,href:t,tokens:[{type:"text",raw:e,text:e}]}}}inlineText(t,n){t=this.rules.inline.text.exec(t);if(t){let e;return e=this.lexer.state.inRawBlock?this.options.sanitize?this.options.sanitizer?this.options.sanitizer(t[0]):h(t[0]):t[0]:h(this.options.smartypants?n(t[0]):t[0]),{type:"text",raw:t[0],text:e}}}}const z={newline:/^(?: *(?:\n|$))+/,code:/^( {4}[^\n]+(?:\n(?: *(?:\n|$))*)?)+/,fences:/^ {0,3}(`{3,}(?=[^`\n]*(?:\n|$))|~{3,})([^\n]*)(?:\n|$)(?:|([\s\S]*?)(?:\n|$))(?: {0,3}\1[~`]* *(?=\n|$)|$)/,hr:/^ {0,3}((?:-[\t ]*){3,}|(?:_[ \t]*){3,}|(?:\*[ \t]*){3,})(?:\n+|$)/,heading:/^ {0,3}(#{1,6})(?=\s|$)(.*)(?:\n+|$)/,blockquote:/^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/,list:/^( {0,3}bull)([ \t][^\n]+?)?(?:\n|$)/,html:"^ {0,3}(?:<(script|pre|style|textarea)[\\s>][\\s\\S]*?(?:</\\1>[^\\n]*\\n+|$)|comment[^\\n]*(\\n+|$)|<\\?[\\s\\S]*?(?:\\?>\\n*|$)|<![A-Z][\\s\\S]*?(?:>\\n*|$)|<!\\[CDATA\\[[\\s\\S]*?(?:\\]\\]>\\n*|$)|</?(tag)(?: +|\\n|/?>)[\\s\\S]*?(?:(?:\\n *)+\\n|$)|<(?!script|pre|style|textarea)([a-z][\\w-]*)(?:attribute)*? */?>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$)|</(?!script|pre|style|textarea)[a-z][\\w-]*\\s*>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$))",def:/^ {0,3}\[(label)\]: *(?:\n *)?([^<\s][^\s]*|<.*?>)(?:(?: +(?:\n *)?| *\n *)(title))? *(?:\n+|$)/,table:b,lheading:/^((?:(?!^bull ).|\n(?!\n|bull ))+?)\n {0,3}(=+|-+) *(?:\n+|$)/,_paragraph:/^([^\n]+(?:\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\n)[^\n]+)*)/,text:/^[^\n]+/,_label:/(?!\s*\])(?:\\.|[^\[\]\\])+/,_title:/(?:"(?:\\"?|[^"\\])*"|'[^'\n]*(?:\n[^'\n]+)*\n?'|\([^()]*\))/},v=(z.def=u(z.def).replace("label",z._label).replace("title",z._title).getRegex(),z.bullet=/(?:[*+-]|\d{1,9}[.)])/,z.listItemStart=u(/^( *)(bull) */).replace("bull",z.bullet).getRegex(),z.list=u(z.list).replace(/bull/g,z.bullet).replace("hr","\\n+(?=\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$))").replace("def","\\n+(?="+z.def.source+")").getRegex(),z._tag="address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul",z._comment=/<!--(?!-?>)[\s\S]*?(?:-->|$)/,z.html=u(z.html,"i").replace("comment",z._comment).replace("tag",z._tag).replace("attribute",/ +[a-zA-Z:_][\w.:-]*(?: *= *"[^"\n]*"| *= *'[^'\n]*'| *= *[^\s"'=<>`]+)?/).getRegex(),z.lheading=u(z.lheading).replace(/bull/g,z.bullet).getRegex(),z.paragraph=u(z._paragraph).replace("hr",z.hr).replace("heading"," {0,3}#{1,6} ").replace("|lheading","").replace("|table","").replace("blockquote"," {0,3}>").replace("fences"," {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list"," {0,3}(?:[*+-]|1[.)]) ").replace("html","</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag",z._tag).getRegex(),z.blockquote=u(z.blockquote).replace("paragraph",z.paragraph).getRegex(),z.normal={...z},z.gfm={...z.normal,table:"^ *([^\\n ].*\\|.*)\\n {0,3}(?:\\| *)?(:?-+:? *(?:\\| *:?-+:? *)*)(?:\\| *)?(?:\\n((?:(?! *\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\n|$))*)\\n*|$)"},z.gfm.table=u(z.gfm.table).replace("hr",z.hr).replace("heading"," {0,3}#{1,6} ").replace("blockquote"," {0,3}>").replace("code"," {4}[^\\n]").replace("fences"," {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list"," {0,3}(?:[*+-]|1[.)]) ").replace("html","</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag",z._tag).getRegex(),z.gfm.paragraph=u(z._paragraph).replace("hr",z.hr).replace("heading"," {0,3}#{1,6} ").replace("|lheading","").replace("table",z.gfm.table).replace("blockquote"," {0,3}>").replace("fences"," {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list"," {0,3}(?:[*+-]|1[.)]) ").replace("html","</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag",z._tag).getRegex(),z.pedantic={...z.normal,html:u("^ *(?:comment *(?:\\n|\\s*$)|<(tag)[\\s\\S]+?</\\1> *(?:\\n{2,}|\\s*$)|<tag(?:\"[^\"]*\"|'[^']*'|\\s[^'\"/>\\s]*)*?/?> *(?:\\n{2,}|\\s*$))").replace("comment",z._comment).replace(/tag/g,"(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\b)\\w+(?!:|[^\\w\\s@]*@)\\b").getRegex(),def:/^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +(["(][^\n]+[")]))? *(?:\n+|$)/,heading:/^(#{1,6})(.*)(?:\n+|$)/,fences:b,lheading:/^(.+?)\n {0,3}(=+|-+) *(?:\n+|$)/,paragraph:u(z.normal._paragraph).replace("hr",z.hr).replace("heading"," *#{1,6} *[^\n]").replace("lheading",z.lheading).replace("blockquote"," {0,3}>").replace("|fences","").replace("|list","").replace("|html","").getRegex()},{escape:/^\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/,autolink:/^<(scheme:[^\s\x00-\x1f<>]*|email)>/,url:b,tag:"^comment|^</[a-zA-Z][\\w:-]*\\s*>|^<[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?>|^<\\?[\\s\\S]*?\\?>|^<![a-zA-Z]+\\s[\\s\\S]*?>|^<!\\[CDATA\\[[\\s\\S]*?\\]\\]>",link:/^!?\[(label)\]\(\s*(href)(?:\s+(title))?\s*\)/,reflink:/^!?\[(label)\]\[(ref)\]/,nolink:/^!?\[(ref)\](?:\[\])?/,reflinkSearch:"reflink|nolink(?!\\()",emStrong:{lDelim:/^(?:\*+(?:((?!\*)[punct])|[^\s*]))|^_+(?:((?!_)[punct])|([^\s_]))/,rDelimAst:/^[^_*]*?__[^_*]*?\*[^_*]*?(?=__)|[^*]+(?=[^*])|(?!\*)[punct](\*+)(?=[\s]|$)|[^punct\s](\*+)(?!\*)(?=[punct\s]|$)|(?!\*)[punct\s](\*+)(?=[^punct\s])|[\s](\*+)(?!\*)(?=[punct])|(?!\*)[punct](\*+)(?!\*)(?=[punct])|[^punct\s](\*+)(?=[^punct\s])/,rDelimUnd:/^[^_*]*?\*\*[^_*]*?_[^_*]*?(?=\*\*)|[^_]+(?=[^_])|(?!_)[punct](_+)(?=[\s]|$)|[^punct\s](_+)(?!_)(?=[punct\s]|$)|(?!_)[punct\s](_+)(?=[^punct\s])|[\s](_+)(?!_)(?=[punct])|(?!_)[punct](_+)(?!_)(?=[punct])/},code:/^(`+)([^`]|[^`][\s\S]*?[^`])\1(?!`)/,br:/^( {2,}|\\)\n(?!\s*$)/,del:b,text:/^(`+|[^`])(?:(?= {2,}\n)|[\s\S]*?(?:(?=[\\<!\[`*_]|\b_|$)|[^ ](?= {2,}\n)))/,punctuation:/^((?![*_])[\spunctuation])/});function O(e){return e.replace(/---/g,"—").replace(/--/g,"–").replace(/(^|[-\u2014/(\[{"\s])'/g,"$1‘").replace(/'/g,"’").replace(/(^|[-\u2014/(\[{\u2018\s])"/g,"$1“").replace(/"/g,"”").replace(/\.{3}/g,"…")}function S(t){let n="";for(let e=0;e<t.length;e++){var s=.5<Math.random()?"x"+t.charCodeAt(e).toString(16):t.charCodeAt(e).toString();n+="&#"+s+";"}return n}v._punctuation="\\p{P}$+<=>`^|~",v.punctuation=u(v.punctuation,"u").replace(/punctuation/g,v._punctuation).getRegex(),v.blockSkip=/\[[^[\]]*?\]\([^\(\)]*?\)|`[^`]*?`|<[^<>]*?>/g,v.anyPunctuation=/\\[punct]/g,v._escapes=/\\([punct])/g,v._comment=u(z._comment).replace("(?:--\x3e|$)","--\x3e").getRegex(),v.emStrong.lDelim=u(v.emStrong.lDelim,"u").replace(/punct/g,v._punctuation).getRegex(),v.emStrong.rDelimAst=u(v.emStrong.rDelimAst,"gu").replace(/punct/g,v._punctuation).getRegex(),v.emStrong.rDelimUnd=u(v.emStrong.rDelimUnd,"gu").replace(/punct/g,v._punctuation).getRegex(),v.anyPunctuation=u(v.anyPunctuation,"gu").replace(/punct/g,v._punctuation).getRegex(),v._escapes=u(v._escapes,"gu").replace(/punct/g,v._punctuation).getRegex(),v._scheme=/[a-zA-Z][a-zA-Z0-9+.-]{1,31}/,v._email=/[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/,v.autolink=u(v.autolink).replace("scheme",v._scheme).replace("email",v._email).getRegex(),v._attribute=/\s+[a-zA-Z:_][\w.:-]*(?:\s*=\s*"[^"]*"|\s*=\s*'[^']*'|\s*=\s*[^\s"'=<>`]+)?/,v.tag=u(v.tag).replace("comment",v._comment).replace("attribute",v._attribute).getRegex(),v._label=/(?:\[(?:\\.|[^\[\]\\])*\]|\\.|`[^`]*`|[^\[\]\\`])*?/,v._href=/<(?:\\.|[^\n<>\\])+>|[^\s\x00-\x1f]*/,v._title=/"(?:\\"?|[^"\\])*"|'(?:\\'?|[^'\\])*'|\((?:\\\)?|[^)\\])*\)/,v.link=u(v.link).replace("label",v._label).replace("href",v._href).replace("title",v._title).getRegex(),v.reflink=u(v.reflink).replace("label",v._label).replace("ref",z._label).getRegex(),v.nolink=u(v.nolink).replace("ref",z._label).getRegex(),v.reflinkSearch=u(v.reflinkSearch,"g").replace("reflink",v.reflink).replace("nolink",v.nolink).getRegex(),v.normal={...v},v.pedantic={...v.normal,strong:{start:/^__|\*\*/,middle:/^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,endAst:/\*\*(?!\*)/g,endUnd:/__(?!_)/g},em:{start:/^_|\*/,middle:/^()\*(?=\S)([\s\S]*?\S)\*(?!\*)|^_(?=\S)([\s\S]*?\S)_(?!_)/,endAst:/\*(?!\*)/g,endUnd:/_(?!_)/g},link:u(/^!?\[(label)\]\((.*?)\)/).replace("label",v._label).getRegex(),reflink:u(/^!?\[(label)\]\s*\[([^\]]*)\]/).replace("label",v._label).getRegex()},v.gfm={...v.normal,escape:u(v.escape).replace("])","~|])").getRegex(),_extended_email:/[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,url:/^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/,_backpedal:/(?:[^?!.,:;*_'"~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'"~)]+(?!$))+/,del:/^(~~?)(?=[^\s~])([\s\S]*?[^\s~])\1(?=[^~]|$)/,text:/^([`~]+|[^`~])(?:(?= {2,}\n)|(?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)|[\s\S]*?(?:(?=[\\<!\[`*~_]|\b_|https?:\/\/|ftp:\/\/|www\.|$)|[^ ](?= {2,}\n)|[^a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-](?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)))/},v.gfm.url=u(v.gfm.url,"i").replace("email",v.gfm._extended_email).getRegex(),v.breaks={...v.gfm,br:u(v.br).replace("{2,}","*").getRegex(),text:u(v.gfm.text).replace("\\b_","\\b_| {2,}\\n").replace(/\{2,\}/g,"*").getRegex()};class T{tokens;options;state;tokenizer;inlineQueue;constructor(e){this.tokens=[],this.tokens.links=Object.create(null),this.options=e||t.defaults,this.options.tokenizer=this.options.tokenizer||new $,this.tokenizer=this.options.tokenizer,this.tokenizer.options=this.options,(this.tokenizer.lexer=this).inlineQueue=[],this.state={inLink:!1,inRawBlock:!1,top:!0};e={block:z.normal,inline:v.normal};this.options.pedantic?(e.block=z.pedantic,e.inline=v.pedantic):this.options.gfm&&(e.block=z.gfm,this.options.breaks?e.inline=v.breaks:e.inline=v.gfm),this.tokenizer.rules=e}static get rules(){return{block:z,inline:v}}static lex(e,t){return new T(t).lex(e)}static lexInline(e,t){return new T(t).inlineTokens(e)}lex(e){var t;for(e=e.replace(/\r\n|\r/g,"\n"),this.blockTokens(e,this.tokens);t=this.inlineQueue.shift();)this.inlineTokens(t.src,t.tokens);return this.tokens}blockTokens(s,t=[]){s=this.options.pedantic?s.replace(/\t/g,"    ").replace(/^ +$/gm,""):s.replace(/^( *)(\t+)/gm,(e,t,n)=>t+"    ".repeat(n.length));let n,e,r,i;for(;s;)if(!(this.options.extensions&&this.options.extensions.block&&this.options.extensions.block.some(e=>!!(n=e.call({lexer:this},s,t))&&(s=s.substring(n.raw.length),t.push(n),!0))))if(n=this.tokenizer.space(s))s=s.substring(n.raw.length),1===n.raw.length&&0<t.length?t[t.length-1].raw+="\n":t.push(n);else if(n=this.tokenizer.code(s))s=s.substring(n.raw.length),!(e=t[t.length-1])||"paragraph"!==e.type&&"text"!==e.type?t.push(n):(e.raw+="\n"+n.raw,e.text+="\n"+n.text,this.inlineQueue[this.inlineQueue.length-1].src=e.text);else if(n=this.tokenizer.fences(s))s=s.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.heading(s))s=s.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.hr(s))s=s.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.blockquote(s))s=s.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.list(s))s=s.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.html(s))s=s.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.def(s))s=s.substring(n.raw.length),!(e=t[t.length-1])||"paragraph"!==e.type&&"text"!==e.type?this.tokens.links[n.tag]||(this.tokens.links[n.tag]={href:n.href,title:n.title}):(e.raw+="\n"+n.raw,e.text+="\n"+n.raw,this.inlineQueue[this.inlineQueue.length-1].src=e.text);else if(n=this.tokenizer.table(s))s=s.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.lheading(s))s=s.substring(n.raw.length),t.push(n);else{if(r=s,this.options.extensions&&this.options.extensions.startBlock){let t=1/0;const a=s.slice(1);let n;this.options.extensions.startBlock.forEach(e=>{"number"==typeof(n=e.call({lexer:this},a))&&0<=n&&(t=Math.min(t,n))}),t<1/0&&0<=t&&(r=s.substring(0,t+1))}if(this.state.top&&(n=this.tokenizer.paragraph(r)))e=t[t.length-1],i&&"paragraph"===e.type?(e.raw+="\n"+n.raw,e.text+="\n"+n.text,this.inlineQueue.pop(),this.inlineQueue[this.inlineQueue.length-1].src=e.text):t.push(n),i=r.length!==s.length,s=s.substring(n.raw.length);else if(n=this.tokenizer.text(s))s=s.substring(n.raw.length),(e=t[t.length-1])&&"text"===e.type?(e.raw+="\n"+n.raw,e.text+="\n"+n.text,this.inlineQueue.pop(),this.inlineQueue[this.inlineQueue.length-1].src=e.text):t.push(n);else if(s){var l="Infinite loop on byte: "+s.charCodeAt(0);if(this.options.silent){console.error(l);break}throw new Error(l)}}return this.state.top=!0,t}inline(e,t=[]){return this.inlineQueue.push({src:e,tokens:t}),t}inlineTokens(s,t=[]){let n,e,r,i=s,l,a,o;if(this.tokens.links){var h=Object.keys(this.tokens.links);if(0<h.length)for(;null!=(l=this.tokenizer.rules.inline.reflinkSearch.exec(i));)h.includes(l[0].slice(l[0].lastIndexOf("[")+1,-1))&&(i=i.slice(0,l.index)+"["+"a".repeat(l[0].length-2)+"]"+i.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex))}for(;null!=(l=this.tokenizer.rules.inline.blockSkip.exec(i));)i=i.slice(0,l.index)+"["+"a".repeat(l[0].length-2)+"]"+i.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);for(;null!=(l=this.tokenizer.rules.inline.anyPunctuation.exec(i));)i=i.slice(0,l.index)+"++"+i.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);for(;s;)if(a||(o=""),a=!1,!(this.options.extensions&&this.options.extensions.inline&&this.options.extensions.inline.some(e=>!!(n=e.call({lexer:this},s,t))&&(s=s.substring(n.raw.length),t.push(n),!0))))if(n=this.tokenizer.escape(s))s=s.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.tag(s))s=s.substring(n.raw.length),(e=t[t.length-1])&&"text"===n.type&&"text"===e.type?(e.raw+=n.raw,e.text+=n.text):t.push(n);else if(n=this.tokenizer.link(s))s=s.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.reflink(s,this.tokens.links))s=s.substring(n.raw.length),(e=t[t.length-1])&&"text"===n.type&&"text"===e.type?(e.raw+=n.raw,e.text+=n.text):t.push(n);else if(n=this.tokenizer.emStrong(s,i,o))s=s.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.codespan(s))s=s.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.br(s))s=s.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.del(s))s=s.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.autolink(s,S))s=s.substring(n.raw.length),t.push(n);else if(!this.state.inLink&&(n=this.tokenizer.url(s,S)))s=s.substring(n.raw.length),t.push(n);else{if(r=s,this.options.extensions&&this.options.extensions.startInline){let t=1/0;const p=s.slice(1);let n;this.options.extensions.startInline.forEach(e=>{"number"==typeof(n=e.call({lexer:this},p))&&0<=n&&(t=Math.min(t,n))}),t<1/0&&0<=t&&(r=s.substring(0,t+1))}if(n=this.tokenizer.inlineText(r,O))s=s.substring(n.raw.length),"_"!==n.raw.slice(-1)&&(o=n.raw.slice(-1)),a=!0,(e=t[t.length-1])&&"text"===e.type?(e.raw+=n.raw,e.text+=n.text):t.push(n);else if(s){var c="Infinite loop on byte: "+s.charCodeAt(0);if(this.options.silent){console.error(c);break}throw new Error(c)}}return t}}class R{options;constructor(e){this.options=e||t.defaults}code(e,t,n){var s,t=(t||"").match(/^\S*/)?.[0];return this.options.highlight&&null!=(s=this.options.highlight(e,t))&&s!==e&&(n=!0,e=s),e=e.replace(/\n$/,"")+"\n",t?'<pre><code class="'+this.options.langPrefix+h(t)+'">'+(n?e:h(e,!0))+"</code></pre>\n":"<pre><code>"+(n?e:h(e,!0))+"</code></pre>\n"}blockquote(e){return`<blockquote>
${e}</blockquote>
`}html(e,t){return e}heading(e,t,n,s){return this.options.headerIds?`<h${t} id="${this.options.headerPrefix+s.slug(n)}">${e}</h${t}>
`:`<h${t}>${e}</h${t}>
`}hr(){return this.options.xhtml?"<hr/>\n":"<hr>\n"}list(e,t,n){var s=t?"ol":"ul";return"<"+s+(t&&1!==n?' start="'+n+'"':"")+">\n"+e+"</"+s+">\n"}listitem(e,t,n){return`<li>${e}</li>
`}checkbox(e){return"<input "+(e?'checked="" ':"")+'disabled="" type="checkbox"'+(this.options.xhtml?" /":"")+"> "}paragraph(e){return`<p>${e}</p>
`}table(e,t){return"<table>\n<thead>\n"+e+"</thead>\n"+(t=t&&`<tbody>${t}</tbody>`)+"</table>\n"}tablerow(e){return`<tr>
${e}</tr>
`}tablecell(e,t){var n=t.header?"th":"td";return(t.align?`<${n} align="${t.align}">`:`<${n}>`)+e+`</${n}>
`}strong(e){return`<strong>${e}</strong>`}em(e){return`<em>${e}</em>`}codespan(e){return`<code>${e}</code>`}br(){return this.options.xhtml?"<br/>":"<br>"}del(e){return`<del>${e}</del>`}link(e,t,n){var s=k(this.options.sanitize,this.options.baseUrl,e);if(null===s)return n;let r='<a target="_blank" href="'+(e=s)+'"';return t&&(r+=' title="'+t+'"'),r+=">"+n+"</a>"}image(e,t,n){var s=k(this.options.sanitize,this.options.baseUrl,e);if(null===s)return n;let r=`<img src="${e=s}" alt="${n}"`;return t&&(r+=` title="${t}"`),r+=this.options.xhtml?"/>":">"}text(e){return e}}class A{strong(e){return e}em(e){return e}codespan(e){return e}del(e){return e}html(e){return e}text(e){return e}link(e,t,n){return""+n}image(e,t,n){return""+n}br(){return""}}class I{seen;constructor(){this.seen={}}serialize(e){return e.toLowerCase().trim().replace(/<[!\/a-z].*?>/gi,"").replace(/[\u2000-\u206F\u2E00-\u2E7F\\'!"#$%&()*+,./:;<=>?@[\]^`{|}~]/g,"").replace(/\s/g,"-")}getNextSafeSlug(e,t){let n=e,s=0;if(this.seen.hasOwnProperty(n))for(s=this.seen[e];s++,n=e+"-"+s,this.seen.hasOwnProperty(n););return t||(this.seen[e]=s,this.seen[n]=0),n}slug(e,t={}){e=this.serialize(e);return this.getNextSafeSlug(e,t.dryrun)}}class E{options;renderer;textRenderer;slugger;constructor(e){this.options=e||t.defaults,this.options.renderer=this.options.renderer||new R,this.renderer=this.options.renderer,this.renderer.options=this.options,this.textRenderer=new A,this.slugger=new I}static parse(e,t){return new E(t).parse(e)}static parseInline(e,t){return new E(t).parseInline(e)}parse(s,r=!0){let i="";for(let n=0;n<s.length;n++){var l=s[n];if(this.options.extensions&&this.options.extensions.renderers&&this.options.extensions.renderers[l.type]){var e=l,t=this.options.extensions.renderers[e.type].call({parser:this},e);if(!1!==t||!["space","hr","heading","code","table","blockquote","list","html","paragraph","text"].includes(e.type)){i+=t||"";continue}}switch(l.type){case"space":continue;case"hr":i+=this.renderer.hr();continue;case"heading":var a=l;i+=this.renderer.heading(this.parseInline(a.tokens),a.depth,m(this.parseInline(a.tokens,this.textRenderer)),this.slugger);continue;case"code":i+=this.renderer.code(l.text,l.lang,!!l.escaped);continue;case"table":{var o=l,a="";let t="";for(let e=0;e<o.header.length;e++)t+=this.renderer.tablecell(this.parseInline(o.header[e].tokens),{header:!0,align:o.align[e]});a+=this.renderer.tablerow(t);let n="";for(let e=0;e<o.rows.length;e++){var h=o.rows[e];t="";for(let e=0;e<h.length;e++)t+=this.renderer.tablecell(this.parseInline(h[e].tokens),{header:!1,align:o.align[e]});n+=this.renderer.tablerow(t)}i+=this.renderer.table(a,n);continue}case"blockquote":var c=this.parse(l.tokens);i+=this.renderer.blockquote(c);continue;case"list":{var p=l,c=p.ordered,u=p.start,g=p.loose;let n="";for(let t=0;t<p.items.length;t++){var d,k=p.items[t],f=k.checked,x=k.task;let e="";k.task&&(d=this.renderer.checkbox(!!f),g?0<k.tokens.length&&"paragraph"===k.tokens[0].type?(k.tokens[0].text=d+" "+k.tokens[0].text,k.tokens[0].tokens&&0<k.tokens[0].tokens.length&&"text"===k.tokens[0].tokens[0].type&&(k.tokens[0].tokens[0].text=d+" "+k.tokens[0].tokens[0].text)):k.tokens.unshift({type:"text",text:d}):e+=d),e+=this.parse(k.tokens,g),n+=this.renderer.listitem(e,x,!!f)}i+=this.renderer.list(n,c,u);continue}case"html":i+=this.renderer.html(l.text,l.block);continue;case"paragraph":i+=this.renderer.paragraph(this.parseInline(l.tokens));continue;case"text":{let e=l,t=e.tokens?this.parseInline(e.tokens):e.text;for(;n+1<s.length&&"text"===s[n+1].type;)e=s[++n],t+="\n"+(e.tokens?this.parseInline(e.tokens):e.text);i+=r?this.renderer.paragraph(t):t;continue}default:u='Token with "'+l.type+'" type was not found.';if(this.options.silent)return console.error(u),"";throw new Error(u)}}return i}parseInline(t,n){n=n||this.renderer;let s="";for(let e=0;e<t.length;e++){var r=t[e];if(this.options.extensions&&this.options.extensions.renderers&&this.options.extensions.renderers[r.type]){var i=this.options.extensions.renderers[r.type].call({parser:this},r);if(!1!==i||!["escape","html","link","image","strong","em","codespan","br","del","text"].includes(r.type)){s+=i||"";continue}}switch(r.type){case"escape":s+=n.text(r.text);break;case"html":s+=n.html(r.text);break;case"link":s+=n.link(r.href,r.title,this.parseInline(r.tokens,n));break;case"image":s+=n.image(r.href,r.title,r.text);break;case"strong":s+=n.strong(this.parseInline(r.tokens,n));break;case"em":s+=n.em(this.parseInline(r.tokens,n));break;case"codespan":s+=n.codespan(r.text);break;case"br":s+=n.br();break;case"del":s+=n.del(this.parseInline(r.tokens,n));break;case"text":s+=n.text(r.text);break;default:var l='Token with "'+r.type+'" type was not found.';if(this.options.silent)return console.error(l),"";throw new Error(l)}}return s}}class P{options;constructor(e){this.options=e||t.defaults}static passThroughHooks=new Set(["preprocess","postprocess"]);preprocess(e){return e}postprocess(e){return e}}class Z{defaults=e();options=this.setOptions;parse=this.#parseMarkdown(T.lex,E.parse);parseInline=this.#parseMarkdown(T.lexInline,E.parseInline);Parser=E;parser=E.parse;Renderer=R;TextRenderer=A;Lexer=T;lexer=T.lex;Tokenizer=$;Slugger=I;Hooks=P;constructor(...e){this.use(...e)}walkTokens(e,t){let n=[];for(const r of e)switch(n=n.concat(t.call(this,r)),r.type){case"table":var s=r;for(const i of s.header)n=n.concat(this.walkTokens(i.tokens,t));for(const l of s.rows)for(const a of l)n=n.concat(this.walkTokens(a.tokens,t));break;case"list":s=r;n=n.concat(this.walkTokens(s.items,t));break;default:{const o=r;this.defaults.extensions?.childTokens?.[o.type]?this.defaults.extensions.childTokens[o.type].forEach(e=>{n=n.concat(this.walkTokens(o[e],t))}):o.tokens&&(n=n.concat(this.walkTokens(o.tokens,t)))}}return n}use(...e){const b=this.defaults.extensions||{renderers:{},childTokens:{}};return e.forEach(e=>{var t={...e};if(t.async=this.defaults.async||t.async||!1,e.extensions&&(e.extensions.forEach(n=>{if(!n.name)throw new Error("extension name required");if("renderer"in n){const s=b.renderers[n.name];s?b.renderers[n.name]=function(...e){let t=n.renderer.apply(this,e);return t=!1===t?s.apply(this,e):t}:b.renderers[n.name]=n.renderer}if("tokenizer"in n){if(!n.level||"block"!==n.level&&"inline"!==n.level)throw new Error("extension level must be 'block' or 'inline'");var e=b[n.level];e?e.unshift(n.tokenizer):b[n.level]=[n.tokenizer],n.start&&("block"===n.level?b.startBlock?b.startBlock.push(n.start):b.startBlock=[n.start]:"inline"===n.level&&(b.startInline?b.startInline.push(n.start):b.startInline=[n.start]))}"childTokens"in n&&n.childTokens&&(b.childTokens[n.name]=n.childTokens)}),t.extensions=b),e.renderer){const i=this.defaults.renderer||new R(this.defaults);for(const l in e.renderer){const a=e.renderer[l];var n=l;const o=i[n];i[n]=(...e)=>{let t=a.apply(i,e);return(t=!1===t?o.apply(i,e):t)||""}}t.renderer=i}if(e.tokenizer){const h=this.defaults.tokenizer||new $(this.defaults);for(const c in e.tokenizer){const p=e.tokenizer[c];var s=c;const u=h[s];h[s]=(...e)=>{let t=p.apply(h,e);return t=!1===t?u.apply(h,e):t}}t.tokenizer=h}if(e.hooks){const g=this.defaults.hooks||new P;for(const d in e.hooks){const k=e.hooks[d];var r=d;const f=g[r];P.passThroughHooks.has(d)?g[r]=e=>{return this.defaults.async?Promise.resolve(k.call(g,e)).then(e=>f.call(g,e)):(e=k.call(g,e),f.call(g,e))}:g[r]=(...e)=>{let t=k.apply(g,e);return t=!1===t?f.apply(g,e):t}}t.hooks=g}if(e.walkTokens){const x=this.defaults.walkTokens,m=e.walkTokens;t.walkTokens=function(e){let t=[];return t.push(m.call(this,e)),t=x?t.concat(x.call(this,e)):t}}this.defaults={...this.defaults,...t}}),this}setOptions(e){return this.defaults={...this.defaults,...e},this}#parseMarkdown(c,p){return(t,e,r)=>{"function"==typeof e&&(r=e,e=null);var n,e={...e};const i={...this.defaults,...e},l=(!0===this.defaults.async&&!1===e.async&&(i.silent||console.warn("marked(): The async option was set to true by an extension. The async: false option sent to parse will be ignored."),i.async=!0),this.#onError(!!i.silent,!!i.async,r));if(null==t)return l(new Error("marked(): input parameter is undefined or null"));if("string"!=typeof t)return l(new Error("marked(): input parameter is of type "+Object.prototype.toString.call(t)+", string expected"));if(e=i,n=r,e&&!e.silent&&(n&&console.warn("marked(): callback is deprecated since version 5.0.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/using_pro#async"),(e.sanitize||e.sanitizer)&&console.warn("marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options"),!e.highlight&&"language-"===e.langPrefix||console.warn("marked(): highlight and langPrefix parameters are deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-highlight."),e.mangle&&console.warn("marked(): mangle parameter is enabled by default, but is deprecated since version 5.0.0, and will be removed in the future. To clear this warning, install https://www.npmjs.com/package/marked-mangle, or disable by setting `{mangle: false}`."),e.baseUrl&&console.warn("marked(): baseUrl parameter is deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-base-url."),e.smartypants&&console.warn("marked(): smartypants parameter is deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-smartypants."),e.xhtml&&console.warn("marked(): xhtml parameter is deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-xhtml."),e.headerIds||e.headerPrefix)&&console.warn("marked(): headerIds and headerPrefix parameters enabled by default, but are deprecated since version 5.0.0, and will be removed in the future. To clear this warning, install  https://www.npmjs.com/package/marked-gfm-heading-id, or disable by setting `{headerIds: false}`."),i.hooks&&(i.hooks.options=i),r){const a=r,o=i.highlight;let n;try{i.hooks&&(t=i.hooks.preprocess(t)),n=c(t,i)}catch(e){return l(e)}const h=t=>{let e;if(!t)try{i.walkTokens&&this.walkTokens(n,i.walkTokens),e=p(n,i),i.hooks&&(e=i.hooks.postprocess(e))}catch(e){t=e}return i.highlight=o,t?l(t):a(null,e)};if(!o||o.length<3)return h();if(delete i.highlight,!n.length)return h();let s=0;this.walkTokens(n,n=>{"code"===n.type&&(s++,setTimeout(()=>{o(n.text,n.lang,(e,t)=>{if(e)return h(e);null!=t&&t!==n.text&&(n.text=t,n.escaped=!0),0===--s&&h()})},0))}),void(0===s&&h())}else{if(i.async)return Promise.resolve(i.hooks?i.hooks.preprocess(t):t).then(e=>c(e,i)).then(e=>i.walkTokens?Promise.all(this.walkTokens(e,i.walkTokens)).then(()=>e):e).then(e=>p(e,i)).then(e=>i.hooks?i.hooks.postprocess(e):e).catch(l);try{i.hooks&&(t=i.hooks.preprocess(t));var s=c(t,i);i.walkTokens&&this.walkTokens(s,i.walkTokens);let e=p(s,i);return e=i.hooks?i.hooks.postprocess(e):e}catch(e){return l(e)}}}}#onError(n,s,r){return e=>{var t;if(e.message+="\nPlease report this to https://github.com/markedjs/marked.",n)return t="<p>An error occurred:</p><pre>"+h(e.message+"",!0)+"</pre>",s?Promise.resolve(t):r?void r(null,t):t;if(s)return Promise.reject(e);if(!r)throw e;r(e)}}}const q=new Z;function L(e,t,n){return q.parse(e,t,n)}L.options=L.setOptions=function(e){return q.setOptions(e),n(L.defaults=q.defaults),L},L.getDefaults=e,L.defaults=t.defaults,L.use=function(...e){return q.use(...e),n(L.defaults=q.defaults),L},L.walkTokens=function(e,t){return q.walkTokens(e,t)},L.parseInline=q.parseInline,L.Parser=E,L.parser=E.parse,L.Renderer=R,L.TextRenderer=A,L.Lexer=T,L.lexer=T.lex,L.Tokenizer=$,L.Slugger=I,L.Hooks=P;var b=(L.parse=L).options,C=L.setOptions,B=L.use,Q=L.walkTokens,U=L.parseInline,M=L,H=E.parse,N=T.lex;t.Hooks=P,t.Lexer=T,t.Marked=Z,t.Parser=E,t.Renderer=R,t.Slugger=I,t.TextRenderer=A,t.Tokenizer=$,t.getDefaults=e,t.lexer=N,t.marked=L,t.options=b,t.parse=M,t.parseInline=U,t.parser=H,t.setOptions=C,t.use=B,t.walkTokens=Q});var micUI = '<span id="flb-record-voice-btn" title="query by voice" onclick="flb.startDictation()" class="flb-input-btns" style=""><svg version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 58 58" style="enable-background:new 0 0 58 58;" xml:space="preserve"><g><path d="M44,28c-0.552,0-1,0.447-1,1v6c0,7.72-6.28,14-14,14s-14-6.28-14-14v-6c0-0.553-0.448-1-1-1s-1,0.447-1,1v6 c0,8.485,6.644,15.429,15,15.949V56h-5c-0.552,0-1,0.447-1,1s0.448,1,1,1h12c0.552,0,1-0.447,1-1s-0.448-1-1-1h-5v-5.051 c8.356-0.52,15-7.465,15-15.949v-6C45,28.447,44.552,28,44,28z"></path><path d="M29,46c6.065,0,11-4.935,11-11V11c0-6.065-4.935-11-11-11S18,4.935,18,11v24C18,41.065,22.935,46,29,46z"></path></g></svg></span>';
flb.util.appendHtml(".flb-input-sec",micUI);
flb.micPulse = false;

window.AudioContext = window.AudioContext || window.webkitAudioContext || window.mozAudioContext || window.operaAudioContext;
window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition  || null;
(function(){

    var isAudioBlank = true;
    var speechEvents = null;
  
    function hark(stream, options) {
        var audioContextType = window.webkitAudioContext || window.AudioContext;

        var harker = this;
        harker.events = {};
        harker.on = function (event, callback) {
            harker.events[event] = callback;
        };

        harker.emit = function () {
            if (harker.events[arguments[0]]) {
                harker.events[arguments[0]](arguments[1], arguments[2], arguments[3], arguments[4]);
            }
        };

        // make it not break in non-supported browsers
        if (!audioContextType) return harker;

        options = options || {};
        // Config
        var smoothing = (options.smoothing || 0.1),
            interval = (options.interval || 50),
            threshold = options.threshold,
            play = options.play,
            history = options.history || 10,
            running = true;

        // Setup Audio Context
        if (!window.audioContext00) {
            window.audioContext00 = new audioContextType();
        }

        var gainNode = audioContext00.createGain();
        gainNode.connect(audioContext00.destination);
        // don't play for self
        gainNode.gain.value = 0;

        var sourceNode, fftBins, analyser;

        analyser = audioContext00.createAnalyser();
        analyser.fftSize = 512;
        analyser.smoothingTimeConstant = smoothing;
        fftBins = new Float32Array(analyser.fftSize);

        //WebRTC Stream
        sourceNode = audioContext00.createMediaStreamSource(stream);
        threshold = threshold || -50;

        sourceNode.connect(analyser);
        if (play) analyser.connect(audioContext00.destination);

        harker.speaking = false;

        harker.setThreshold = function (t) {
            threshold = t;
        };

        harker.setInterval = function (i) {
            interval = i;
        };

        harker.stop = function () {
            running = false;
            harker.emit('volume_change', -100, threshold);
            if (harker.speaking) {
                harker.speaking = false;
                harker.emit('stopped_speaking');
            }
        };
        harker.speakingHistory = [];
        for (var i = 0; i < history; i++) {
            harker.speakingHistory.push(0);
        }

        // Poll the analyser node to determine if speaking
        // and emit events if changed
        var looper = function () {
            setTimeout(function () {

                //check if stop has been called
                if (!running) {
                    return;
                }

                var currentVolume = getMaxVolume(analyser, fftBins);

                harker.emit('volume_change', currentVolume, threshold);

                var history = 0;
                if (currentVolume > threshold && !harker.speaking) {
                    // trigger quickly, short history
                    for (var i = harker.speakingHistory.length - 3; i < harker.speakingHistory.length; i++) {
                        history += harker.speakingHistory[i];
                    }
                    if (history >= 2) {
                        harker.speaking = true;
                        harker.emit('speaking');
                    }
                } else if (currentVolume < threshold && harker.speaking) {
                    for (var j = 0; j < harker.speakingHistory.length; j++) {
                        history += harker.speakingHistory[j];
                    }
                    if (history === 0) {
                        harker.speaking = false;
                        harker.emit('stopped_speaking');
                    }
                }
                harker.speakingHistory.shift();
                harker.speakingHistory.push(0 + (currentVolume > threshold));

                looper();
            }, interval);
        };
        looper();

        function getMaxVolume(analyser, fftBins) {
            var maxVolume = -Infinity;
            analyser.getFloatFrequencyData(fftBins);

            for (var i = 4, ii = fftBins.length; i < ii; i++) {
                if (fftBins[i] > maxVolume && fftBins[i] < 0) {
                    maxVolume = fftBins[i];
                }
            }

            return maxVolume;
        }

        return harker;
    }
    function WzRecorder(config) {

        config = config || {};

        var self = this;
        var audioInput;
        var audioNode;
        var bufferSize = config.bufferSize || 4096;
        var recordedData = [];
        var recording = false;
        var recordingLength = 0;
        var startDate;
        var audioCtx;
        var silaceTimeOut = config.bufferSize || 2000;
        var speechTimeOut = config.bufferSize || 15000;
        var silaceTimer = null;
        var speechTimer = null;

        this.toggleRecording = function()
        {
            recording ? self.stop() : self.start();
        }
        

        this.start = function() {

            // reset any previous data
            recordedData = [];
            recordingLength = 0;
            
            // webkit audio context shim
            audioCtx = audioCtx || new window.AudioContext();

            if (typeof audioCtx.createJavaScriptNode != "undefined") {
                audioNode = audioCtx.createJavaScriptNode(bufferSize, 1, 1);
            } else if (typeof audioCtx.createScriptProcessor != "undefined") {
                audioNode = audioCtx.createScriptProcessor(bufferSize, 1, 1);
            } else {
                flb.emit("error","Web Audio isn't available in your browser.");
                throw 'WebAudio not supported!';
            }

            audioNode.connect(audioCtx.destination);

            navigator.mediaDevices.getUserMedia({audio: true})
                .then(onMicrophoneCaptured)
                .catch(onMicrophoneError);
        };

        this.stop = function() {
            if(speechTimer){
                clearTimeout(speechTimer);
            }

            if(silaceTimer){
                clearTimeout(silaceTimer);
            }

            flb.getElements("#flb-record-voice-btn")[0].classList.remove("mic-pulse");
            flb.getElements("#flb-input")[0].placeholder = 'Type or ask me something';
            flb.sockemit('endSpeechData',{});

            stopRecording(function(blob) {
                self.blob = blob;
                config.onRecordingStop && config.onRecordingStop(blob);
            });
        };
        
        function stopRecording(callback) {
            // stop recording
            recording = false;
            flb.getElements("#flb-record-voice-btn")[0].classList.remove("mic-pulse");
            window.localStream.getTracks().forEach( function(track) { track.stop(); });
            audioInput.disconnect();
            audioNode.disconnect();
            speechEvents.stop();
            callback(self.blob);
           
        }


        function onMicrophoneCaptured(microphone) {
            
            //appcore.sock.send(JSON.stringify({sockType:"startSpeechData",languageCode:appcore.speech_recog_lang||'en-US'}));
           
            flb.sockemit('startSpeechData',{languageCode:flb.config.speechRecognitionLang||'en-US'});
            
            flb.getElements("#flb-record-voice-btn")[0].classList.add("mic-pulse");
            flb.getElements("#flb-input")[0].placeholder = "I'm listening ...";
            animatePlaceHolder();

            isAudioBlank = true;
            // save the stream so we can disconnect it when we're done
            window.localStream = microphone;

            audioInput = audioCtx.createMediaStreamSource(microphone);
            audioInput.connect(audioNode);

            audioNode.onaudioprocess = onAudioProcess;

            recording = true;
            self.startDate = new Date();
            
            config.onRecordingStart && config.onRecordingStart();
            var sampleRate = audioCtx.sampleRate;

            speechEvents = hark(microphone, {});
            speechEvents.on('speaking', function() {
                   
                    isAudioBlank = false;
                    clearTimeout(silaceTimer);
                });

            speechEvents.on('stopped_speaking', function() {
                
                if(recording){
                    silaceTimer = setTimeout(function(){
                      self.stop();
                    },silaceTimeOut);
                }
            });

            speechTimer = setTimeout(function(){
              self.stop();
            },speechTimeOut);
        }

        function onMicrophoneError(e) {
            flb.emit("error","AudioCapture has been blocked");
            console.log(e);
            flb.getElements("#flb-record-voice-btn")[0].classList.remove("mic-pulse");
        }

        function downsampleBuffer(buffer, sampleRate, outSampleRate) {
            if (outSampleRate == sampleRate) {
                return buffer;
            }
            if (outSampleRate > sampleRate) {
                throw "downsampling rate show be smaller than original sample rate";
            }
            var sampleRateRatio = sampleRate / outSampleRate;
            var newLength = Math.round(buffer.length / sampleRateRatio);
            var result = new Int16Array(newLength);
            var offsetResult = 0;
            var offsetBuffer = 0;
            while (offsetResult < result.length) {
                var nextOffsetBuffer = Math.round((offsetResult + 1) * sampleRateRatio);
                var accum = 0, count = 0;
                for (var i = offsetBuffer; i < nextOffsetBuffer && i < buffer.length; i++) {
                    accum += buffer[i];
                    count++;
                }

                result[offsetResult] = Math.min(1, accum / count) * 0x7FFF;
                offsetResult++;
                offsetBuffer = nextOffsetBuffer;
            }
            return result.buffer;
        }

        function onAudioProcess(e) {
            if (!recording) {
                return;
            }

            var left = e.inputBuffer.getChannelData(0);
            var left16 = downsampleBuffer(left, 48000, 16000);
            //appcore.sock.send(left16);
            flb.socket.send(left16);
            self.duration = new Date().getTime() - self.startDate.getTime();

            config.onRecording && config.onRecording(self.duration);
        }
        
    }

    var recorder = new WzRecorder({
        onRecordingStop: function(blob) {
           //document.getElementById('player1').src = URL.createObjectURL(blob);
        },
        onRecording: function(milliseconds) {
           // document.getElementById('duration').innerText = milliseconds + 'ms';
        }
    });


    flb.startDictation = function(){
 /*
       if (!isEdg && isChrome && 'SpeechRecognition' in window && SpeechRecognition) {
          // speech recognition API supported
          if(flb.micPulse){
              recognitionWebApi.stop();
          }else{
              recognitionWebApi.start();
          }
        } else {
        */
          // backup floatbot STT
          recorder.toggleRecording();
        //}

        flb.micPulse = !flb.micPulse;
    }

    if ('SpeechRecognition' in window && SpeechRecognition) {
        var recognitionWebApi = new SpeechRecognition();

        var finalTranscript = '';
        recognitionWebApi.interimResults = true;
        recognitionWebApi.onstart = function() {
            
            finalTranscript = '';
            flb.getElements("#flb-record-voice-btn")[0].classList.add("mic-pulse");
            flb.getElements("#flb-input")[0].placeholder = "I'm listening ...";
            animatePlaceHolder();
        };

        recognitionWebApi.onerror = function(event) {
           console.log(event.error);
            recording = false;
            flb.getElements("#flb-record-voice-btn")[0].classList.remove("mic-pulse");
        };

        recognitionWebApi.onend = function() {
             flb.emit("final-transcript", {t:finalTranscript});
        };
  
        recognitionWebApi.onresult = function(event) {
             
            var interimTranscript = '';
           
            for (var i = event.resultIndex, len = event.results.length; i < len; i++) {
              var transcript = event.results[i][0].transcript;
              if (event.results[i].isFinal) {
                finalTranscript += transcript;
              } else {
                interimTranscript += transcript;
              }
            }
            flb.emit("transcript", {t:interimTranscript});
            //console.log(interimTranscript);
        };

        recognitionWebApi.lang = flb.config.speechRecognitionLang;
    }

})();

flb.on("transcript", function(obj) {
    updInterTranscript(obj.t.replace(/(\r\n|\n|\r)/gm, ""));
});

flb.getElements("#flb-input")[0].addEventListener("paste", function(event) {
    flb.isMicVisible = true;
    flb.toggelSendBtn();
});

flb.on("final-transcript", function(obj) {
    removeInterTranscript();
    flb.micPulse = false;
    flb.getElements("#flb-record-voice-btn")[0].classList.remove("mic-pulse");
    flb.getElements("#flb-input")[0].placeholder = 'Type or ask me something';
    animatePlaceHolder();
    flb.getElements("#flb-input")[0].value = obj.t.replace(/(\r\n|\n|\r)/gm, "");
    flb.sendTextMessage();
});

var loopTimer = null;
function animatePlaceHolder(){
     var string = flb.getElements("#flb-input")[0].placeholder;
     var array = string.split("");

     var text = '';
     window.animatePl = function(){
         if (array.length > 0) {
        text += array.shift();
        flb.getElements("#flb-input")[0].placeholder = text;
    } else {
        clearTimeout(loopTimer);
            }
        loopTimer = setTimeout('animatePl()',70);
     }
     animatePl();
}

function removeInterTranscript(){

    var input = flb.getElements(".mic-input");
    for (var i = 0; i < input.length; i++) {
        input[i].remove();
    }
    
}

function updInterTranscript(interimTranscript){
    if(!interimTranscript || interimTranscript==''){
        return;
    }
    
    var micInput = flb.getElements("#mic-input");

    if(micInput.length){
        micInput[0].innerHTML = interimTranscript;
    }else{
        var html='<div class="flb-user-msg mic-input"><span class="flb-text-view" id="mic-input">'+interimTranscript+'</span></div>';
        flb.util.appendHtml('#flb-body',html);
        flb.util.scrollBottom('#flb-body');
    }   
}

// Opera 8.0+
var isOpera = (!!window.opr && !!opr.addons) || !!window.opera || navigator.userAgent.indexOf(' OPR/') >= 0;

// Firefox 1.0+
var isFirefox = typeof InstallTrigger !== 'undefined';

// Safari 3.0+ "[object HTMLElementConstructor]" 
var isSafari = /constructor/i.test(window.HTMLElement) || (function (p) { return p.toString() === "[object SafariRemoteNotification]"; })(!window['safari'] || (typeof safari !== 'undefined' && safari.pushNotification));

// Internet Explorer 6-11
var isIE = /*@cc_on!@*/false || !!document.documentMode;

var isEdg = /Edg/.test(navigator.userAgent);
// Edge 20+
var isEdge = !isIE && !isEdg && !!window.StyleMedia;

// Chrome 1 - 71
var isChrome = !!window.chrome && (!!window.chrome.webstore || !!window.chrome.runtime);

// Blink engine detection
var isBlink = (isChrome || isOpera) && !!window.CSS;

flb.getElements("#flb-input")[0].addEventListener("keydown", function(event) {
    if (event.key === "Enter") {
        flb.isMicVisible = false;
        flb.toggelSendBtn();
    }else{
        
        if(flb.getElements("#flb-input")[0].value.length>1){
            flb.isMicVisible = true;
            flb.toggelSendBtn();
        }else{
            flb.isMicVisible = false;
            flb.toggelSendBtn();
        }
    }
});

flb.getElements("#flb-send-msg-btn")[0].addEventListener("click", function(event) {

        
    if(flb.getElements("#flb-input")[0].value.length>1){
        flb.isMicVisible = true;
        flb.toggelSendBtn();
    }else{
        flb.isMicVisible = false;
        flb.toggelSendBtn();
    }
});

flb.isMicVisible = false;
flb.toggelSendBtn = function(){
    flb.getElements("#flb-send-msg-btn")[0].classList.remove("show");
    flb.getElements("#flb-record-voice-btn")[0].classList.remove("show");
    flb.getElements("#flb-send-msg-btn")[0].classList.remove("hidden");
    flb.getElements("#flb-record-voice-btn")[0].classList.remove("hidden");

    if(!flb.isMicVisible){
        flb.getElements("#flb-send-msg-btn")[0].classList.add("hidden");
        flb.getElements("#flb-record-voice-btn")[0].classList.add("show");
    }else{
        flb.getElements("#flb-send-msg-btn")[0].classList.add("show");
        flb.getElements("#flb-record-voice-btn")[0].classList.add("hidden");
    }
    flb.isMicVisible = !flb.isMicVisible;
};
flb.toggelSendBtn();
var live_style = "#flb-title{font-weight:600;}.flb-bot-msg .flb-text-view{background:#F2F3F4;color: #333333;"+
"}.flb-bot-msg{background-image: url('https://floatbot.ai/third_party_api/production/boi/img/small-boi.png');background-repeat: no-repeat;background-size: 24px;background-position: 6px 6px;"+
"}#flb-restart-button svg,#flb-send-msg-btn svg,svg{fill: #0075BE}.flb-user-msg .flb-text-view{background-color: #F6821E;margin-right: 32px;margin-top:4px;margin-bottom:4px;}"+
".flb-user-msg{background-image: url(https://floatbot.ai/third_party_api/production/boi/img/user-small-boi.svg);background-repeat: no-repeat;"+
"background-position: right;background-size: 24px;}.boi-btn{text-decoration: none;font-size: 12px;color: #0f7cbd;border: 1px solid #0f7cbd;border-color:#0075BE;"+
"border-radius: 3px;padding: 10px;margin: 5px 0px;background-color:#0075BE;color:#fff;}.boi-btn:hover{"+
"background-color:#051E33;border-color:#051E33;}.boi-btn img{background: #F6821E;height: 24px; border-radius: 4px;margin-left: 4%;position: relative;top: 7px}"+
".flb-code-item{padding: 2% 0;}.flb-code-item .flb-text-view{min-width:48%;}.flb-quick-reply-buttons .flb-action-elem{border-color: #0075BE;color: #333333;border-radius: 8px;}"+
".flb-quick-reply-buttons .flb-action-elem:hover{background-color: #051E33;color: #FFFFFF;border-color: #051E33;}"+
".flb-bot-msg > div{margin-left:25px;}.flb-widget-handle{border:none;background-color:transparent;border-color:none;height:70px;width:72px;}"+
".flb-widget-open-ico{background-size: 84%;}.flb-text-view{margin: 4px 0; text-align: justify;}#flb-widget-handle{display:none;}"+
".flb-bot-msg, .flb-user-msg{padding-left: 3%;padding-right: 0%;padding-bottom: 3px;margin-right: 6px;}"+
"#flb-send-msg-btn{padding-top: 8px;}.flb-action-elem.img{padding: 6px 6px 6px 6px;}.flb-action-elem img{height: 16px;border-radius: 0px;}"+
".sentiment-holder{display: none;}.flb-body {padding-top:10;}";
flb.util.appendHtml('style', live_style);

var send_btn='<svg xmlns="http://www.w3.org/2000/svg" width="20" height="16.842" viewBox="0 0 20 16.842"><path id="send_FILL0_wght400_GRAD0_opsz48" d="M6,24.842V8l20,8.421Zm1.579-2.447,14.316-5.974L7.579,10.368v4.421l6.368,1.632L7.579,18Zm0,0v0Z" transform="translate(-6 -8)" fill="#0075be"/></svg>';
var session_icon='<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 20 20" class="flb-open-conv-btn"><path id="refresh_FILL0_wght400_GRAD0_opsz48" d="M18,28a9.64,9.64,0,0,1-7.078-2.922A9.64,9.64,0,0,1,8,18a9.64,9.64,0,0,1,2.922-7.078A9.64,9.64,0,0,1,18,8a9.665,9.665,0,0,1,4.656,1.078,11.027,11.027,0,0,1,3.469,2.953V8H28v7.938H20.063V14.063h5.25a9.572,9.572,0,0,0-3.031-3.031A7.888,7.888,0,0,0,18,9.875,8.056,8.056,0,0,0,9.875,18,8.056,8.056,0,0,0,18,26.125a8.2,8.2,0,0,0,4.75-1.484,7.72,7.72,0,0,0,3-3.922h1.938A9.576,9.576,0,0,1,24.094,26,9.947,9.947,0,0,1,18,28Z" transform="translate(-8 -8)" fill="#fff"/></svg>';

flb.getElements("#flb-send-msg-btn")[0].innerHTML='';
flb.getElements("#flb-send-msg-btn")[0].innerHTML=send_btn;
flb.getElements("#open-session-list-btn")[0].innerHTML='';
flb.getElements("#open-session-list-btn")[0].innerHTML=session_icon;

setTimeout(() => {
   /* open bot when click on id boiFloatbot element */
 document.getElementById("boiFloatbot").addEventListener("click", function(){
   flb.maximizeBot();
});
}, 1500);

const ratingFirst="rating1";
var rating1='5';
var rating2='5';
var rating3='5';

flb.on("minimizeBot", function(){

  if(!flb.getElements("#rateForm").length) {
  flb.maximizeBot();
  
  var ratingScreen = '<form id="rateForm" class="feedback_div"'+
        'style="position: absolute;top: -16px;z-index: 9999999999;height: 100%;width: 100%;border-radius: 10px;">'+
        '<div style="background: #0075be;padding: 10px 0;text-align: center;color: #fff;border-radius: 10px;border-bottom-left-radius: 0;border-bottom-right-radius: 0;">'+
        '<strong>Feedback</strong></div>'+
        '<div class="star_field"><fieldset>'+
          '<p class="que_txt" style="margin-bottom: 5px;">How would you rate your overall experience?</p>'+
          '<p class="que_txt" style="padding: 0;margin: 0;">आप अपने समग्र अनुभव को कैसे रेट करेंगे?</p>'+
          '<button class="stars active" type="button" name="a" value="1">&starf;</button>'+
          '<button class="stars active" type="button" name="b" value="2">&starf;</button>'+
          '<button class="stars active" type="button" name="c" value="2">&starf;</button>'+
          '<button class="stars active" type="button" name="d" value="4">&starf;</button>'+
          '<button class="stars active" type="button" name="e" value="5">&starf;</button>'+
        '</fieldset></div><hr style="padding: 0;margin: 0;">'+
        '<div class="star_field"><fieldset>'+
          '<p class="que_txt" style="margin-bottom: 5px;">How likely you would recommend BOI to a family & friend?</p>'+
          '<p class="que_txt" style="padding: 0;margin: 0;">कितनी संभावना है कि अपने परिवार और मित्र को बीओआई की अनुशंसा करेंगे?</p>'+
          '<button class="stars2 active" type="button" name="a" value="1">&starf;</button>'+
          '<button class="stars2 active" type="button" name="b" value="2">&starf;</button>'+
          '<button class="stars2 active" type="button" name="c" value="2">&starf;</button>'+
          '<button class="stars2 active" type="button" name="d" value="4">&starf;</button>'+
          '<button class="stars2 active" type="button" name="e" value="5">&starf;</button>'+
        '</fieldset></div><hr style="padding: 0;margin: 0;">'+
        '<div class="star_field"><fieldset>'+
          '<p class="que_txt" style="margin-bottom: 5px;">How much effort did it take to resolve your issue?</p>'+
          '<p class="que_txt" style="padding: 0;margin: 0;">आपकी समस्या को हल करने में कितना प्रयास हुआ?</p>'+
          '<button class="stars3 active" type="button" name="a" value="1">&starf;</button>'+
          '<button class="stars3 active" type="button" name="b" value="2">&starf;</button>'+
          '<button class="stars3 active" type="button" name="c" value="2">&starf;</button>'+
          '<button class="stars3 active" type="button" name="d" value="4">&starf;</button>'+
          '<button class="stars3 active" type="button" name="e" value="5">&starf;</button>'+
        '</fieldset></div>'+
        '<div style="text-align:center;margin-top:5%;">'+
        '<span id="submit_feedback" onclick="flb.submitFeedback();" style="margin-right: 10px;">Submit</span>'+
        '<span id="close_feedback" onclick="flb.closeFeedback();">Close</span>'+
        '</div>'+
    '</form>';
  
  flb.getElements("#flb-bot")[0].insertAdjacentHTML('beforeend', ratingScreen);

  const stars = flb.getElements(".stars");
  const stars2 = flb.getElements(".stars2");
  const stars3 = flb.getElements(".stars3");

  stars.forEach((star, index1) => {
    star.addEventListener("click", () => {
      stars.forEach((star, index2) => {
        index1 >= index2 ? star.classList.add("active") : star.classList.remove("active");
        if(index1 == index2){
          rating1=index1+1; 
        }
      });
    });
  });

  stars2.forEach((star, index1) => {
    star.addEventListener("click", () => {
      stars2.forEach((star, index2) => {
        index1 >= index2 ? star.classList.add("active") : star.classList.remove("active");
        if(index1==index2){
          rating2=index1+1; 
        }
      });
    });
  });

  stars3.forEach((star, index1) => {
    star.addEventListener("click", () => {
      stars3.forEach((star, index2) => {
        index1 >= index2 ? star.classList.add("active") : star.classList.remove("active");
        if(index1==index2){
          rating3=index1+1; 
        }
      });
    });
  });

  var style = '.active{color:#F6821E;}form{background: #fff;width: max-content;'+
  'margin:1em 0 2em;color:purple;}fieldset>* {font-size:clamp(14px, 4vw, 36px);}fieldset {border: none;background-clip: text;text-align: center;padding: 0;margin: 0;padding-bottom: 5px;width: 90%;display: block;margin: 0 auto;}'+
  '.star_field{padding: 1% 0;}.star_field:hover{background: #56534e1c;}'+
  'fieldset button {padding: 0;pointer-events:auto;cursor:pointer;vertical-align:top;background: none;'+
  'border: none;font-size: 2em;color: #ccc;width:1.7ch;}fieldset:hover button {color: #F6821E;}'+
  'fieldset:hover button:hover ~ button {color: #ccc;}.voted button {pointer-events:none;}'+
  'html{min-height: 100vh;display: flex;}body {margin: auto;}'+
  '#close_feedback,#submit_feedback{pointer-events: all;cursor: pointer;padding: 4px 12px 4px 12px;width: auto;background: #0075BE;color: #fff;display: inline-block;border-radius: 5px;text-transform: uppercase;font-weight: 600;font-size: 14px;}'+
  '.que_txt{font-size: 14px;text-align: center;display: block;color: #333333;letter-spacing: 0;font-weight:600;line-height: 1.2;}';
  flb.util.appendHtml('style', style);
}
});

flb.closeFeedback = function(){
  if(flb.getElements("#rateForm")[0]) {
    
    flb.minimizeBot()
    setTimeout(function(){flb.getElements("#rateForm")[0].remove();},100)
  }
  
}

flb.submitFeedback = function(){

  var data={'flow_id':"63f8b8dbcc35d50f2cf0241c",'variables':{'rating1':rating1,'rating2':rating2,'rating3':rating3}};
  var enc=btoa(JSON.stringify(data));
  
  flb.onCustomButtonClick(enc);
  flb.closeFeedback();
}
}(window, document));

